{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Definable from './Definable';\nimport * as zrUtil from '../../core/util';\nimport * as colorTool from '../../tool/color';\n\nfunction isLinearGradient(value) {\n  return value.type === 'linear';\n}\n\nfunction isRadialGradient(value) {\n  return value.type === 'radial';\n}\n\nfunction isGradient(value) {\n  return value && (value.type === 'linear' || value.type === 'radial');\n}\n\nvar GradientManager = function (_super) {\n  __extends(GradientManager, _super);\n\n  function GradientManager(zrId, svgRoot) {\n    return _super.call(this, zrId, svgRoot, ['linearGradient', 'radialGradient'], '__gradient_in_use__') || this;\n  }\n\n  GradientManager.prototype.addWithoutUpdate = function (svgElement, displayable) {\n    if (displayable && displayable.style) {\n      var that_1 = this;\n      zrUtil.each(['fill', 'stroke'], function (fillOrStroke) {\n        var value = displayable.style[fillOrStroke];\n\n        if (isGradient(value)) {\n          var gradient = value;\n          var defs = that_1.getDefs(true);\n          var dom = void 0;\n\n          if (gradient.__dom) {\n            dom = gradient.__dom;\n\n            if (!defs.contains(gradient.__dom)) {\n              that_1.addDom(dom);\n            }\n          } else {\n            dom = that_1.add(gradient);\n          }\n\n          that_1.markUsed(displayable);\n          var id = dom.getAttribute('id');\n          svgElement.setAttribute(fillOrStroke, 'url(#' + id + ')');\n        }\n      });\n    }\n  };\n\n  GradientManager.prototype.add = function (gradient) {\n    var dom;\n\n    if (isLinearGradient(gradient)) {\n      dom = this.createElement('linearGradient');\n    } else if (isRadialGradient(gradient)) {\n      dom = this.createElement('radialGradient');\n    } else {\n      zrUtil.logError('Illegal gradient type.');\n      return null;\n    }\n\n    gradient.id = gradient.id || this.nextId++;\n    dom.setAttribute('id', 'zr' + this._zrId + '-gradient-' + gradient.id);\n    this.updateDom(gradient, dom);\n    this.addDom(dom);\n    return dom;\n  };\n\n  GradientManager.prototype.update = function (gradient) {\n    if (!isGradient(gradient)) {\n      return;\n    }\n\n    var that = this;\n    this.doUpdate(gradient, function () {\n      var dom = gradient.__dom;\n\n      if (!dom) {\n        return;\n      }\n\n      var tagName = dom.tagName;\n      var type = gradient.type;\n\n      if (type === 'linear' && tagName === 'linearGradient' || type === 'radial' && tagName === 'radialGradient') {\n        that.updateDom(gradient, gradient.__dom);\n      } else {\n        that.removeDom(gradient);\n        that.add(gradient);\n      }\n    });\n  };\n\n  GradientManager.prototype.updateDom = function (gradient, dom) {\n    if (isLinearGradient(gradient)) {\n      dom.setAttribute('x1', gradient.x + '');\n      dom.setAttribute('y1', gradient.y + '');\n      dom.setAttribute('x2', gradient.x2 + '');\n      dom.setAttribute('y2', gradient.y2 + '');\n    } else if (isRadialGradient(gradient)) {\n      dom.setAttribute('cx', gradient.x + '');\n      dom.setAttribute('cy', gradient.y + '');\n      dom.setAttribute('r', gradient.r + '');\n    } else {\n      zrUtil.logError('Illegal gradient type.');\n      return;\n    }\n\n    if (gradient.global) {\n      dom.setAttribute('gradientUnits', 'userSpaceOnUse');\n    } else {\n      dom.setAttribute('gradientUnits', 'objectBoundingBox');\n    }\n\n    dom.innerHTML = '';\n    var colors = gradient.colorStops;\n\n    for (var i = 0, len = colors.length; i < len; ++i) {\n      var stop_1 = this.createElement('stop');\n      stop_1.setAttribute('offset', colors[i].offset * 100 + '%');\n      var color = colors[i].color;\n\n      if (color.indexOf('rgba') > -1) {\n        var opacity = colorTool.parse(color)[3];\n        var hex = colorTool.toHex(color);\n        stop_1.setAttribute('stop-color', '#' + hex);\n        stop_1.setAttribute('stop-opacity', opacity + '');\n      } else {\n        stop_1.setAttribute('stop-color', colors[i].color);\n      }\n\n      dom.appendChild(stop_1);\n    }\n\n    gradient.__dom = dom;\n  };\n\n  GradientManager.prototype.markUsed = function (displayable) {\n    if (displayable.style) {\n      var gradient = displayable.style.fill;\n\n      if (gradient && gradient.__dom) {\n        _super.prototype.markDomUsed.call(this, gradient.__dom);\n      }\n\n      gradient = displayable.style.stroke;\n\n      if (gradient && gradient.__dom) {\n        _super.prototype.markDomUsed.call(this, gradient.__dom);\n      }\n    }\n  };\n\n  return GradientManager;\n}(Definable);\n\nexport default GradientManager;","map":null,"metadata":{},"sourceType":"module"}