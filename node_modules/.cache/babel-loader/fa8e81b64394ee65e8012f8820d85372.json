{"ast":null,"code":"import Clip from './Clip';\nimport * as color from '../tool/color';\nimport { isArrayLike, keys, logError } from '../core/util';\nvar arraySlice = Array.prototype.slice;\nexport function interpolateNumber(p0, p1, percent) {\n  return (p1 - p0) * percent + p0;\n}\nexport function step(p0, p1, percent) {\n  return percent > 0.5 ? p1 : p0;\n}\nexport function interpolate1DArray(out, p0, p1, percent) {\n  var len = p0.length;\n\n  for (var i = 0; i < len; i++) {\n    out[i] = interpolateNumber(p0[i], p1[i], percent);\n  }\n}\nexport function interpolate2DArray(out, p0, p1, percent) {\n  var len = p0.length;\n  var len2 = len && p0[0].length;\n\n  for (var i = 0; i < len; i++) {\n    if (!out[i]) {\n      out[i] = [];\n    }\n\n    for (var j = 0; j < len2; j++) {\n      out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);\n    }\n  }\n}\n\nfunction add1DArray(out, p0, p1, sign) {\n  var len = p0.length;\n\n  for (var i = 0; i < len; i++) {\n    out[i] = p0[i] + p1[i] * sign;\n  }\n\n  return out;\n}\n\nfunction add2DArray(out, p0, p1, sign) {\n  var len = p0.length;\n  var len2 = len && p0[0].length;\n\n  for (var i = 0; i < len; i++) {\n    if (!out[i]) {\n      out[i] = [];\n    }\n\n    for (var j = 0; j < len2; j++) {\n      out[i][j] = p0[i][j] + p1[i][j] * sign;\n    }\n  }\n\n  return out;\n}\n\nfunction fillArray(val0, val1, arrDim) {\n  var arr0 = val0;\n  var arr1 = val1;\n\n  if (!arr0.push || !arr1.push) {\n    return;\n  }\n\n  var arr0Len = arr0.length;\n  var arr1Len = arr1.length;\n\n  if (arr0Len !== arr1Len) {\n    var isPreviousLarger = arr0Len > arr1Len;\n\n    if (isPreviousLarger) {\n      arr0.length = arr1Len;\n    } else {\n      for (var i = arr0Len; i < arr1Len; i++) {\n        arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));\n      }\n    }\n  }\n\n  var len2 = arr0[0] && arr0[0].length;\n\n  for (var i = 0; i < arr0.length; i++) {\n    if (arrDim === 1) {\n      if (isNaN(arr0[i])) {\n        arr0[i] = arr1[i];\n      }\n    } else {\n      for (var j = 0; j < len2; j++) {\n        if (isNaN(arr0[i][j])) {\n          arr0[i][j] = arr1[i][j];\n        }\n      }\n    }\n  }\n}\n\nfunction is1DArraySame(arr0, arr1) {\n  var len = arr0.length;\n\n  if (len !== arr1.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (arr0[i] !== arr1[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction is2DArraySame(arr0, arr1) {\n  var len = arr0.length;\n\n  if (len !== arr1.length) {\n    return false;\n  }\n\n  var len2 = arr0[0].length;\n\n  for (var i = 0; i < len; i++) {\n    for (var j = 0; j < len2; j++) {\n      if (arr0[i][j] !== arr1[i][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n  var v0 = (p2 - p0) * 0.5;\n  var v1 = (p3 - p1) * 0.5;\n  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;\n}\n\nfunction catmullRomInterpolate1DArray(out, p0, p1, p2, p3, t, t2, t3) {\n  var len = p0.length;\n\n  for (var i = 0; i < len; i++) {\n    out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);\n  }\n}\n\nfunction catmullRomInterpolate2DArray(out, p0, p1, p2, p3, t, t2, t3) {\n  var len = p0.length;\n  var len2 = p0[0].length;\n\n  for (var i = 0; i < len; i++) {\n    if (!out[i]) {\n      out[1] = [];\n    }\n\n    for (var j = 0; j < len2; j++) {\n      out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);\n    }\n  }\n}\n\nexport function cloneValue(value) {\n  if (isArrayLike(value)) {\n    var len = value.length;\n\n    if (isArrayLike(value[0])) {\n      var ret = [];\n\n      for (var i = 0; i < len; i++) {\n        ret.push(arraySlice.call(value[i]));\n      }\n\n      return ret;\n    }\n\n    return arraySlice.call(value);\n  }\n\n  return value;\n}\n\nfunction rgba2String(rgba) {\n  rgba[0] = Math.floor(rgba[0]);\n  rgba[1] = Math.floor(rgba[1]);\n  rgba[2] = Math.floor(rgba[2]);\n  return 'rgba(' + rgba.join(',') + ')';\n}\n\nfunction guessArrayDim(value) {\n  return isArrayLike(value && value[0]) ? 2 : 1;\n}\n\nvar tmpRgba = [0, 0, 0, 0];\n\nvar Track = function () {\n  function Track(propName) {\n    this.keyframes = [];\n    this.maxTime = 0;\n    this.arrDim = 0;\n    this.interpolable = true;\n    this._needsSort = false;\n    this._isAllValueEqual = true;\n    this._lastFrame = 0;\n    this._lastFramePercent = 0;\n    this.propName = propName;\n  }\n\n  Track.prototype.isFinished = function () {\n    return this._finished;\n  };\n\n  Track.prototype.setFinished = function () {\n    this._finished = true;\n\n    if (this._additiveTrack) {\n      this._additiveTrack.setFinished();\n    }\n  };\n\n  Track.prototype.needsAnimate = function () {\n    return !this._isAllValueEqual && this.keyframes.length >= 2 && this.interpolable;\n  };\n\n  Track.prototype.getAdditiveTrack = function () {\n    return this._additiveTrack;\n  };\n\n  Track.prototype.addKeyframe = function (time, value) {\n    if (time >= this.maxTime) {\n      this.maxTime = time;\n    } else {\n      this._needsSort = true;\n    }\n\n    var keyframes = this.keyframes;\n    var len = keyframes.length;\n\n    if (this.interpolable) {\n      if (isArrayLike(value)) {\n        var arrayDim = guessArrayDim(value);\n\n        if (len > 0 && this.arrDim !== arrayDim) {\n          this.interpolable = false;\n          return;\n        }\n\n        if (arrayDim === 1 && typeof value[0] !== 'number' || arrayDim === 2 && typeof value[0][0] !== 'number') {\n          this.interpolable = false;\n          return;\n        }\n\n        if (len > 0) {\n          var lastFrame = keyframes[len - 1];\n\n          if (this._isAllValueEqual) {\n            if (arrayDim === 1) {\n              if (!is1DArraySame(value, lastFrame.value)) {\n                this._isAllValueEqual = false;\n              }\n            } else {\n              this._isAllValueEqual = false;\n            }\n          }\n        }\n\n        this.arrDim = arrayDim;\n      } else {\n        if (this.arrDim > 0) {\n          this.interpolable = false;\n          return;\n        }\n\n        if (typeof value === 'string') {\n          var colorArray = color.parse(value);\n\n          if (colorArray) {\n            value = colorArray;\n            this.isValueColor = true;\n          } else {\n            this.interpolable = false;\n          }\n        } else if (typeof value !== 'number') {\n          this.interpolable = false;\n          return;\n        }\n\n        if (this._isAllValueEqual && len > 0) {\n          var lastFrame = keyframes[len - 1];\n\n          if (this.isValueColor && !is1DArraySame(lastFrame.value, value)) {\n            this._isAllValueEqual = false;\n          } else if (lastFrame.value !== value) {\n            this._isAllValueEqual = false;\n          }\n        }\n      }\n    }\n\n    var kf = {\n      time: time,\n      value: value,\n      percent: 0\n    };\n    this.keyframes.push(kf);\n    return kf;\n  };\n\n  Track.prototype.prepare = function (additiveTrack) {\n    var kfs = this.keyframes;\n\n    if (this._needsSort) {\n      kfs.sort(function (a, b) {\n        return a.time - b.time;\n      });\n    }\n\n    var arrDim = this.arrDim;\n    var kfsLen = kfs.length;\n    var lastKf = kfs[kfsLen - 1];\n\n    for (var i = 0; i < kfsLen; i++) {\n      kfs[i].percent = kfs[i].time / this.maxTime;\n\n      if (arrDim > 0 && i !== kfsLen - 1) {\n        fillArray(kfs[i].value, lastKf.value, arrDim);\n      }\n    }\n\n    if (additiveTrack && this.needsAnimate() && additiveTrack.needsAnimate() && arrDim === additiveTrack.arrDim && this.isValueColor === additiveTrack.isValueColor && !additiveTrack._finished) {\n      this._additiveTrack = additiveTrack;\n      var startValue = kfs[0].value;\n\n      for (var i = 0; i < kfsLen; i++) {\n        if (arrDim === 0) {\n          if (this.isValueColor) {\n            kfs[i].additiveValue = add1DArray([], kfs[i].value, startValue, -1);\n          } else {\n            kfs[i].additiveValue = kfs[i].value - startValue;\n          }\n        } else if (arrDim === 1) {\n          kfs[i].additiveValue = add1DArray([], kfs[i].value, startValue, -1);\n        } else if (arrDim === 2) {\n          kfs[i].additiveValue = add2DArray([], kfs[i].value, startValue, -1);\n        }\n      }\n    }\n  };\n\n  Track.prototype.step = function (target, percent) {\n    if (this._finished) {\n      return;\n    }\n\n    if (this._additiveTrack && this._additiveTrack._finished) {\n      this._additiveTrack = null;\n    }\n\n    var isAdditive = this._additiveTrack != null;\n    var valueKey = isAdditive ? 'additiveValue' : 'value';\n    var keyframes = this.keyframes;\n    var kfsNum = this.keyframes.length;\n    var propName = this.propName;\n    var arrDim = this.arrDim;\n    var isValueColor = this.isValueColor;\n    var frameIdx;\n\n    if (percent < 0) {\n      frameIdx = 0;\n    } else if (percent < this._lastFramePercent) {\n      var start = Math.min(this._lastFrame + 1, kfsNum - 1);\n\n      for (frameIdx = start; frameIdx >= 0; frameIdx--) {\n        if (keyframes[frameIdx].percent <= percent) {\n          break;\n        }\n      }\n\n      frameIdx = Math.min(frameIdx, kfsNum - 2);\n    } else {\n      for (frameIdx = this._lastFrame; frameIdx < kfsNum; frameIdx++) {\n        if (keyframes[frameIdx].percent > percent) {\n          break;\n        }\n      }\n\n      frameIdx = Math.min(frameIdx - 1, kfsNum - 2);\n    }\n\n    var nextFrame = keyframes[frameIdx + 1];\n    var frame = keyframes[frameIdx];\n\n    if (!(frame && nextFrame)) {\n      return;\n    }\n\n    this._lastFrame = frameIdx;\n    this._lastFramePercent = percent;\n    var range = nextFrame.percent - frame.percent;\n\n    if (range === 0) {\n      return;\n    }\n\n    var w = (percent - frame.percent) / range;\n    var targetArr = isAdditive ? this._additiveValue : isValueColor ? tmpRgba : target[propName];\n\n    if ((arrDim > 0 || isValueColor) && !targetArr) {\n      targetArr = this._additiveValue = [];\n    }\n\n    if (this.useSpline) {\n      var p1 = keyframes[frameIdx][valueKey];\n      var p0 = keyframes[frameIdx === 0 ? frameIdx : frameIdx - 1][valueKey];\n      var p2 = keyframes[frameIdx > kfsNum - 2 ? kfsNum - 1 : frameIdx + 1][valueKey];\n      var p3 = keyframes[frameIdx > kfsNum - 3 ? kfsNum - 1 : frameIdx + 2][valueKey];\n\n      if (arrDim > 0) {\n        arrDim === 1 ? catmullRomInterpolate1DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w) : catmullRomInterpolate2DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w);\n      } else if (isValueColor) {\n        catmullRomInterpolate1DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w);\n\n        if (!isAdditive) {\n          target[propName] = rgba2String(targetArr);\n        }\n      } else {\n        var value = void 0;\n\n        if (!this.interpolable) {\n          value = p2;\n        } else {\n          value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);\n        }\n\n        if (isAdditive) {\n          this._additiveValue = value;\n        } else {\n          target[propName] = value;\n        }\n      }\n    } else {\n      if (arrDim > 0) {\n        arrDim === 1 ? interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w) : interpolate2DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);\n      } else if (isValueColor) {\n        interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);\n\n        if (!isAdditive) {\n          target[propName] = rgba2String(targetArr);\n        }\n      } else {\n        var value = void 0;\n\n        if (!this.interpolable) {\n          value = step(frame[valueKey], nextFrame[valueKey], w);\n        } else {\n          value = interpolateNumber(frame[valueKey], nextFrame[valueKey], w);\n        }\n\n        if (isAdditive) {\n          this._additiveValue = value;\n        } else {\n          target[propName] = value;\n        }\n      }\n    }\n\n    if (isAdditive) {\n      this._addToTarget(target);\n    }\n  };\n\n  Track.prototype._addToTarget = function (target) {\n    var arrDim = this.arrDim;\n    var propName = this.propName;\n    var additiveValue = this._additiveValue;\n\n    if (arrDim === 0) {\n      if (this.isValueColor) {\n        color.parse(target[propName], tmpRgba);\n        add1DArray(tmpRgba, tmpRgba, additiveValue, 1);\n        target[propName] = rgba2String(tmpRgba);\n      } else {\n        target[propName] = target[propName] + additiveValue;\n      }\n    } else if (arrDim === 1) {\n      add1DArray(target[propName], target[propName], additiveValue, 1);\n    } else if (arrDim === 2) {\n      add2DArray(target[propName], target[propName], additiveValue, 1);\n    }\n  };\n\n  return Track;\n}();\n\nvar Animator = function () {\n  function Animator(target, loop, additiveTo) {\n    this._tracks = {};\n    this._trackKeys = [];\n    this._delay = 0;\n    this._maxTime = 0;\n    this._paused = false;\n    this._started = 0;\n    this._clip = null;\n    this._target = target;\n    this._loop = loop;\n\n    if (loop && additiveTo) {\n      logError('Can\\' use additive animation on looped animation.');\n      return;\n    }\n\n    this._additiveAnimators = additiveTo;\n  }\n\n  Animator.prototype.getTarget = function () {\n    return this._target;\n  };\n\n  Animator.prototype.changeTarget = function (target) {\n    this._target = target;\n  };\n\n  Animator.prototype.when = function (time, props) {\n    return this.whenWithKeys(time, props, keys(props));\n  };\n\n  Animator.prototype.whenWithKeys = function (time, props, propNames) {\n    var tracks = this._tracks;\n\n    for (var i = 0; i < propNames.length; i++) {\n      var propName = propNames[i];\n      var track = tracks[propName];\n\n      if (!track) {\n        track = tracks[propName] = new Track(propName);\n        var initialValue = void 0;\n\n        var additiveTrack = this._getAdditiveTrack(propName);\n\n        if (additiveTrack) {\n          var lastFinalKf = additiveTrack.keyframes[additiveTrack.keyframes.length - 1];\n          initialValue = lastFinalKf && lastFinalKf.value;\n\n          if (additiveTrack.isValueColor && initialValue) {\n            initialValue = rgba2String(initialValue);\n          }\n        } else {\n          initialValue = this._target[propName];\n        }\n\n        if (initialValue == null) {\n          continue;\n        }\n\n        if (time !== 0) {\n          track.addKeyframe(0, cloneValue(initialValue));\n        }\n\n        this._trackKeys.push(propName);\n      }\n\n      track.addKeyframe(time, cloneValue(props[propName]));\n    }\n\n    this._maxTime = Math.max(this._maxTime, time);\n    return this;\n  };\n\n  Animator.prototype.pause = function () {\n    this._clip.pause();\n\n    this._paused = true;\n  };\n\n  Animator.prototype.resume = function () {\n    this._clip.resume();\n\n    this._paused = false;\n  };\n\n  Animator.prototype.isPaused = function () {\n    return !!this._paused;\n  };\n\n  Animator.prototype._doneCallback = function () {\n    this._setTracksFinished();\n\n    this._clip = null;\n    var doneList = this._doneList;\n\n    if (doneList) {\n      var len = doneList.length;\n\n      for (var i = 0; i < len; i++) {\n        doneList[i].call(this);\n      }\n    }\n  };\n\n  Animator.prototype._abortedCallback = function () {\n    this._setTracksFinished();\n\n    var animation = this.animation;\n    var abortedList = this._abortedList;\n\n    if (animation) {\n      animation.removeClip(this._clip);\n    }\n\n    this._clip = null;\n\n    if (abortedList) {\n      for (var i = 0; i < abortedList.length; i++) {\n        abortedList[i].call(this);\n      }\n    }\n  };\n\n  Animator.prototype._setTracksFinished = function () {\n    var tracks = this._tracks;\n    var tracksKeys = this._trackKeys;\n\n    for (var i = 0; i < tracksKeys.length; i++) {\n      tracks[tracksKeys[i]].setFinished();\n    }\n  };\n\n  Animator.prototype._getAdditiveTrack = function (trackName) {\n    var additiveTrack;\n    var additiveAnimators = this._additiveAnimators;\n\n    if (additiveAnimators) {\n      for (var i = 0; i < additiveAnimators.length; i++) {\n        var track = additiveAnimators[i].getTrack(trackName);\n\n        if (track) {\n          additiveTrack = track;\n        }\n      }\n    }\n\n    return additiveTrack;\n  };\n\n  Animator.prototype.start = function (easing, forceAnimate) {\n    if (this._started > 0) {\n      return;\n    }\n\n    this._started = 1;\n    var self = this;\n    var tracks = [];\n\n    for (var i = 0; i < this._trackKeys.length; i++) {\n      var propName = this._trackKeys[i];\n      var track = this._tracks[propName];\n\n      var additiveTrack = this._getAdditiveTrack(propName);\n\n      var kfs = track.keyframes;\n      track.prepare(additiveTrack);\n\n      if (track.needsAnimate()) {\n        tracks.push(track);\n      } else if (!track.interpolable) {\n        var lastKf = kfs[kfs.length - 1];\n\n        if (lastKf) {\n          self._target[track.propName] = lastKf.value;\n        }\n      }\n    }\n\n    if (tracks.length || forceAnimate) {\n      var clip = new Clip({\n        life: this._maxTime,\n        loop: this._loop,\n        delay: this._delay,\n        onframe: function onframe(percent) {\n          self._started = 2;\n          var additiveAnimators = self._additiveAnimators;\n\n          if (additiveAnimators) {\n            var stillHasAdditiveAnimator = false;\n\n            for (var i = 0; i < additiveAnimators.length; i++) {\n              if (additiveAnimators[i]._clip) {\n                stillHasAdditiveAnimator = true;\n                break;\n              }\n            }\n\n            if (!stillHasAdditiveAnimator) {\n              self._additiveAnimators = null;\n            }\n          }\n\n          for (var i = 0; i < tracks.length; i++) {\n            tracks[i].step(self._target, percent);\n          }\n\n          var onframeList = self._onframeList;\n\n          if (onframeList) {\n            for (var i = 0; i < onframeList.length; i++) {\n              onframeList[i](self._target, percent);\n            }\n          }\n        },\n        ondestroy: function ondestroy() {\n          self._doneCallback();\n        }\n      });\n      this._clip = clip;\n\n      if (this.animation) {\n        this.animation.addClip(clip);\n      }\n\n      if (easing && easing !== 'spline') {\n        clip.easing = easing;\n      }\n    } else {\n      this._doneCallback();\n    }\n\n    return this;\n  };\n\n  Animator.prototype.stop = function (forwardToLast) {\n    if (!this._clip) {\n      return;\n    }\n\n    var clip = this._clip;\n\n    if (forwardToLast) {\n      clip.onframe(1);\n    }\n\n    this._abortedCallback();\n  };\n\n  Animator.prototype.delay = function (time) {\n    this._delay = time;\n    return this;\n  };\n\n  Animator.prototype.during = function (cb) {\n    if (cb) {\n      if (!this._onframeList) {\n        this._onframeList = [];\n      }\n\n      this._onframeList.push(cb);\n    }\n\n    return this;\n  };\n\n  Animator.prototype.done = function (cb) {\n    if (cb) {\n      if (!this._doneList) {\n        this._doneList = [];\n      }\n\n      this._doneList.push(cb);\n    }\n\n    return this;\n  };\n\n  Animator.prototype.aborted = function (cb) {\n    if (cb) {\n      if (!this._abortedList) {\n        this._abortedList = [];\n      }\n\n      this._abortedList.push(cb);\n    }\n\n    return this;\n  };\n\n  Animator.prototype.getClip = function () {\n    return this._clip;\n  };\n\n  Animator.prototype.getTrack = function (propName) {\n    return this._tracks[propName];\n  };\n\n  Animator.prototype.stopTracks = function (propNames, forwardToLast) {\n    if (!propNames.length || !this._clip) {\n      return true;\n    }\n\n    var tracks = this._tracks;\n    var tracksKeys = this._trackKeys;\n\n    for (var i = 0; i < propNames.length; i++) {\n      var track = tracks[propNames[i]];\n\n      if (track) {\n        if (forwardToLast) {\n          track.step(this._target, 1);\n        } else if (this._started === 1) {\n          track.step(this._target, 0);\n        }\n\n        track.setFinished();\n      }\n    }\n\n    var allAborted = true;\n\n    for (var i = 0; i < tracksKeys.length; i++) {\n      if (!tracks[tracksKeys[i]].isFinished()) {\n        allAborted = false;\n        break;\n      }\n    }\n\n    if (allAborted) {\n      this._abortedCallback();\n    }\n\n    return allAborted;\n  };\n\n  Animator.prototype.saveFinalToTarget = function (target, trackKeys) {\n    if (!target) {\n      return;\n    }\n\n    trackKeys = trackKeys || this._trackKeys;\n\n    for (var i = 0; i < trackKeys.length; i++) {\n      var propName = trackKeys[i];\n      var track = this._tracks[propName];\n\n      if (!track || track.isFinished()) {\n        continue;\n      }\n\n      var kfs = track.keyframes;\n      var lastKf = kfs[kfs.length - 1];\n\n      if (lastKf) {\n        var val = cloneValue(lastKf.value);\n\n        if (track.isValueColor) {\n          val = rgba2String(val);\n        }\n\n        target[propName] = val;\n      }\n    }\n  };\n\n  Animator.prototype.__changeFinalValue = function (finalProps, trackKeys) {\n    trackKeys = trackKeys || keys(finalProps);\n\n    for (var i = 0; i < trackKeys.length; i++) {\n      var propName = trackKeys[i];\n      var track = this._tracks[propName];\n\n      if (!track) {\n        continue;\n      }\n\n      var kfs = track.keyframes;\n\n      if (kfs.length > 1) {\n        var lastKf = kfs.pop();\n        track.addKeyframe(lastKf.time, finalProps[propName]);\n        track.prepare(track.getAdditiveTrack());\n      }\n    }\n  };\n\n  return Animator;\n}();\n\nexport default Animator;","map":null,"metadata":{},"sourceType":"module"}