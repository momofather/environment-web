{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Definable from './Definable';\nimport * as zrUtil from '../../core/util';\nimport { isClipPathChanged } from '../../canvas/helper';\n\nfunction generateClipPathsKey(clipPaths) {\n  var key = [];\n\n  if (clipPaths) {\n    for (var i = 0; i < clipPaths.length; i++) {\n      var clipPath = clipPaths[i];\n      key.push(clipPath.id);\n    }\n  }\n\n  return key.join(',');\n}\n\nexport function hasClipPath(displayable) {\n  var clipPaths = displayable.__clipPaths;\n  return clipPaths && clipPaths.length > 0;\n}\n\nvar ClippathManager = function (_super) {\n  __extends(ClippathManager, _super);\n\n  function ClippathManager(zrId, svgRoot) {\n    var _this = _super.call(this, zrId, svgRoot, 'clipPath', '__clippath_in_use__') || this;\n\n    _this._refGroups = {};\n    _this._keyDuplicateCount = {};\n    return _this;\n  }\n\n  ClippathManager.prototype.markAllUnused = function () {\n    _super.prototype.markAllUnused.call(this);\n\n    for (var key in this._refGroups) {\n      this.markDomUnused(this._refGroups[key]);\n    }\n\n    this._keyDuplicateCount = {};\n  };\n\n  ClippathManager.prototype._getClipPathGroup = function (displayable, prevDisplayable) {\n    if (!hasClipPath(displayable)) {\n      return;\n    }\n\n    var clipPaths = displayable.__clipPaths;\n    var keyDuplicateCount = this._keyDuplicateCount;\n    var clipPathKey = generateClipPathsKey(clipPaths);\n\n    if (isClipPathChanged(clipPaths, prevDisplayable && prevDisplayable.__clipPaths)) {\n      keyDuplicateCount[clipPathKey] = keyDuplicateCount[clipPathKey] || 0;\n      keyDuplicateCount[clipPathKey] && (clipPathKey += '-' + keyDuplicateCount[clipPathKey]);\n      keyDuplicateCount[clipPathKey]++;\n    }\n\n    return this._refGroups[clipPathKey] || (this._refGroups[clipPathKey] = this.createElement('g'));\n  };\n\n  ClippathManager.prototype.update = function (displayable, prevDisplayable) {\n    var clipGroup = this._getClipPathGroup(displayable, prevDisplayable);\n\n    if (clipGroup) {\n      this.markDomUsed(clipGroup);\n      this.updateDom(clipGroup, displayable.__clipPaths);\n    }\n\n    return clipGroup;\n  };\n\n  ;\n\n  ClippathManager.prototype.updateDom = function (parentEl, clipPaths) {\n    if (clipPaths && clipPaths.length > 0) {\n      var defs = this.getDefs(true);\n      var clipPath = clipPaths[0];\n      var clipPathEl = void 0;\n      var id = void 0;\n\n      if (clipPath._dom) {\n        id = clipPath._dom.getAttribute('id');\n        clipPathEl = clipPath._dom;\n\n        if (!defs.contains(clipPathEl)) {\n          defs.appendChild(clipPathEl);\n        }\n      } else {\n        id = 'zr' + this._zrId + '-clip-' + this.nextId;\n        ++this.nextId;\n        clipPathEl = this.createElement('clipPath');\n        clipPathEl.setAttribute('id', id);\n        defs.appendChild(clipPathEl);\n        clipPath._dom = clipPathEl;\n      }\n\n      var svgProxy = this.getSvgProxy(clipPath);\n      svgProxy.brush(clipPath);\n      var pathEl = this.getSvgElement(clipPath);\n      clipPathEl.innerHTML = '';\n      clipPathEl.appendChild(pathEl);\n      parentEl.setAttribute('clip-path', 'url(#' + id + ')');\n\n      if (clipPaths.length > 1) {\n        this.updateDom(clipPathEl, clipPaths.slice(1));\n      }\n    } else {\n      if (parentEl) {\n        parentEl.setAttribute('clip-path', 'none');\n      }\n    }\n  };\n\n  ;\n\n  ClippathManager.prototype.markUsed = function (displayable) {\n    var _this = this;\n\n    if (displayable.__clipPaths) {\n      zrUtil.each(displayable.__clipPaths, function (clipPath) {\n        if (clipPath._dom) {\n          _super.prototype.markDomUsed.call(_this, clipPath._dom);\n        }\n      });\n    }\n  };\n\n  ;\n\n  ClippathManager.prototype.removeUnused = function () {\n    _super.prototype.removeUnused.call(this);\n\n    var newRefGroupsMap = {};\n\n    for (var key in this._refGroups) {\n      var group = this._refGroups[key];\n\n      if (!this.isDomUnused(group)) {\n        newRefGroupsMap[key] = group;\n      } else if (group.parentNode) {\n        group.parentNode.removeChild(group);\n      }\n    }\n\n    this._refGroups = newRefGroupsMap;\n  };\n\n  return ClippathManager;\n}(Definable);\n\nexport default ClippathManager;","map":null,"metadata":{},"sourceType":"module"}