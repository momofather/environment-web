{"ast":null,"code":"import { createElement } from '../core';\nimport * as zrUtil from '../../core/util';\nimport Path from '../../graphic/Path';\nimport ZRImage from '../../graphic/Image';\nimport TSpan from '../../graphic/TSpan';\nimport { path as svgPath, image as svgImage, text as svgText } from '../graphic';\nvar MARK_UNUSED = '0';\nvar MARK_USED = '1';\n\nvar Definable = function () {\n  function Definable(zrId, svgRoot, tagNames, markLabel, domName) {\n    this.nextId = 0;\n    this._domName = '_dom';\n    this.createElement = createElement;\n    this._zrId = zrId;\n    this._svgRoot = svgRoot;\n    this._tagNames = typeof tagNames === 'string' ? [tagNames] : tagNames;\n    this._markLabel = markLabel;\n\n    if (domName) {\n      this._domName = domName;\n    }\n  }\n\n  Definable.prototype.getDefs = function (isForceCreating) {\n    var svgRoot = this._svgRoot;\n\n    var defs = this._svgRoot.getElementsByTagName('defs');\n\n    if (defs.length === 0) {\n      if (isForceCreating) {\n        var defs_1 = svgRoot.insertBefore(this.createElement('defs'), svgRoot.firstChild);\n\n        if (!defs_1.contains) {\n          defs_1.contains = function (el) {\n            var children = defs_1.children;\n\n            if (!children) {\n              return false;\n            }\n\n            for (var i = children.length - 1; i >= 0; --i) {\n              if (children[i] === el) {\n                return true;\n              }\n            }\n\n            return false;\n          };\n        }\n\n        return defs_1;\n      } else {\n        return null;\n      }\n    } else {\n      return defs[0];\n    }\n  };\n\n  Definable.prototype.doUpdate = function (target, onUpdate) {\n    if (!target) {\n      return;\n    }\n\n    var defs = this.getDefs(false);\n\n    if (target[this._domName] && defs.contains(target[this._domName])) {\n      if (typeof onUpdate === 'function') {\n        onUpdate(target);\n      }\n    } else {\n      var dom = this.add(target);\n\n      if (dom) {\n        target[this._domName] = dom;\n      }\n    }\n  };\n\n  Definable.prototype.add = function (target) {\n    return null;\n  };\n\n  Definable.prototype.addDom = function (dom) {\n    var defs = this.getDefs(true);\n\n    if (dom.parentNode !== defs) {\n      defs.appendChild(dom);\n    }\n  };\n\n  Definable.prototype.removeDom = function (target) {\n    var defs = this.getDefs(false);\n\n    if (defs && target[this._domName]) {\n      defs.removeChild(target[this._domName]);\n      target[this._domName] = null;\n    }\n  };\n\n  Definable.prototype.getDoms = function () {\n    var defs = this.getDefs(false);\n\n    if (!defs) {\n      return [];\n    }\n\n    var doms = [];\n    zrUtil.each(this._tagNames, function (tagName) {\n      var tags = defs.getElementsByTagName(tagName);\n\n      for (var i = 0; i < tags.length; i++) {\n        doms.push(tags[i]);\n      }\n    });\n    return doms;\n  };\n\n  Definable.prototype.markAllUnused = function () {\n    var doms = this.getDoms();\n    var that = this;\n    zrUtil.each(doms, function (dom) {\n      dom[that._markLabel] = MARK_UNUSED;\n    });\n  };\n\n  Definable.prototype.markDomUsed = function (dom) {\n    dom && (dom[this._markLabel] = MARK_USED);\n  };\n\n  ;\n\n  Definable.prototype.markDomUnused = function (dom) {\n    dom && (dom[this._markLabel] = MARK_UNUSED);\n  };\n\n  ;\n\n  Definable.prototype.isDomUnused = function (dom) {\n    return dom && dom[this._markLabel] !== MARK_USED;\n  };\n\n  Definable.prototype.removeUnused = function () {\n    var _this = this;\n\n    var defs = this.getDefs(false);\n\n    if (!defs) {\n      return;\n    }\n\n    var doms = this.getDoms();\n    zrUtil.each(doms, function (dom) {\n      if (_this.isDomUnused(dom)) {\n        defs.removeChild(dom);\n      }\n    });\n  };\n\n  Definable.prototype.getSvgProxy = function (displayable) {\n    if (displayable instanceof Path) {\n      return svgPath;\n    } else if (displayable instanceof ZRImage) {\n      return svgImage;\n    } else if (displayable instanceof TSpan) {\n      return svgText;\n    } else {\n      return svgPath;\n    }\n  };\n\n  Definable.prototype.getSvgElement = function (displayable) {\n    return displayable.__svgEl;\n  };\n\n  return Definable;\n}();\n\nexport default Definable;","map":null,"metadata":{},"sourceType":"module"}