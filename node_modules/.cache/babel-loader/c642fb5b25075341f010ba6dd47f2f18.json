{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Definable from './Definable';\n\nvar ShadowManager = function (_super) {\n  __extends(ShadowManager, _super);\n\n  function ShadowManager(zrId, svgRoot) {\n    var _this = _super.call(this, zrId, svgRoot, ['filter'], '__filter_in_use__', '_shadowDom') || this;\n\n    _this._shadowDomMap = {};\n    _this._shadowDomPool = [];\n    return _this;\n  }\n\n  ShadowManager.prototype._getFromPool = function () {\n    var shadowDom = this._shadowDomPool.pop();\n\n    if (!shadowDom) {\n      shadowDom = this.createElement('filter');\n      shadowDom.setAttribute('id', 'zr' + this._zrId + '-shadow-' + this.nextId++);\n      var domChild = this.createElement('feDropShadow');\n      shadowDom.appendChild(domChild);\n      this.addDom(shadowDom);\n    }\n\n    return shadowDom;\n  };\n\n  ShadowManager.prototype.update = function (svgElement, displayable) {\n    var style = displayable.style;\n\n    if (hasShadow(style)) {\n      var shadowKey = getShadowKey(displayable);\n      var shadowDom = displayable._shadowDom = this._shadowDomMap[shadowKey];\n\n      if (!shadowDom) {\n        shadowDom = this._getFromPool();\n        this._shadowDomMap[shadowKey] = shadowDom;\n      }\n\n      this.updateDom(svgElement, displayable, shadowDom);\n    } else {\n      this.remove(svgElement, displayable);\n    }\n  };\n\n  ShadowManager.prototype.remove = function (svgElement, displayable) {\n    if (displayable._shadowDom != null) {\n      displayable._shadowDom = null;\n      svgElement.style.filter = '';\n    }\n  };\n\n  ShadowManager.prototype.updateDom = function (svgElement, displayable, shadowDom) {\n    var domChild = shadowDom.children[0];\n    var style = displayable.style;\n    var globalScale = displayable.getGlobalScale();\n    var scaleX = globalScale[0];\n    var scaleY = globalScale[1];\n\n    if (!scaleX || !scaleY) {\n      return;\n    }\n\n    var offsetX = style.shadowOffsetX || 0;\n    var offsetY = style.shadowOffsetY || 0;\n    var blur = style.shadowBlur;\n    var color = style.shadowColor;\n    domChild.setAttribute('dx', offsetX / scaleX + '');\n    domChild.setAttribute('dy', offsetY / scaleY + '');\n    domChild.setAttribute('flood-color', color);\n    var stdDx = blur / 2 / scaleX;\n    var stdDy = blur / 2 / scaleY;\n    var stdDeviation = stdDx + ' ' + stdDy;\n    domChild.setAttribute('stdDeviation', stdDeviation);\n    shadowDom.setAttribute('x', '-100%');\n    shadowDom.setAttribute('y', '-100%');\n    shadowDom.setAttribute('width', '300%');\n    shadowDom.setAttribute('height', '300%');\n    displayable._shadowDom = shadowDom;\n    var id = shadowDom.getAttribute('id');\n    svgElement.style.filter = 'url(#' + id + ')';\n  };\n\n  ShadowManager.prototype.removeUnused = function () {\n    var defs = this.getDefs(false);\n\n    if (!defs) {\n      return;\n    }\n\n    var shadowDomsPool = this._shadowDomPool;\n\n    for (var key in this._shadowDomMap) {\n      var dom = this._shadowDomMap[key];\n      shadowDomsPool.push(dom);\n    }\n\n    this._shadowDomMap = {};\n  };\n\n  return ShadowManager;\n}(Definable);\n\nexport default ShadowManager;\n\nfunction hasShadow(style) {\n  return style && (style.shadowBlur || style.shadowOffsetX || style.shadowOffsetY);\n}\n\nfunction getShadowKey(displayable) {\n  var style = displayable.style;\n  var globalScale = displayable.getGlobalScale();\n  return [style.shadowColor, (style.shadowBlur || 0).toFixed(2), (style.shadowOffsetX || 0).toFixed(2), (style.shadowOffsetY || 0).toFixed(2), globalScale[0], globalScale[1]].join(',');\n}","map":null,"metadata":{},"sourceType":"module"}