{"ast":null,"code":"function diff(oldArr, newArr, equals) {\n  if (!equals) {\n    equals = function equals(a, b) {\n      return a === b;\n    };\n  }\n\n  oldArr = oldArr.slice();\n  newArr = newArr.slice();\n  var newLen = newArr.length;\n  var oldLen = oldArr.length;\n  var editLength = 1;\n  var maxEditLength = newLen + oldLen;\n  var bestPath = [{\n    newPos: -1,\n    components: []\n  }];\n  var oldPos = extractCommon(bestPath[0], newArr, oldArr, 0, equals);\n\n  if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n    var indices = [];\n\n    for (var i = 0; i < newArr.length; i++) {\n      indices.push(i);\n    }\n\n    return [{\n      indices: indices,\n      count: newArr.length,\n      added: false,\n      removed: false\n    }];\n  }\n\n  function execEditLength() {\n    for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n      var basePath;\n      var addPath = bestPath[diagonalPath - 1];\n      var removePath = bestPath[diagonalPath + 1];\n      var oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\n      if (addPath) {\n        bestPath[diagonalPath - 1] = undefined;\n      }\n\n      var canAdd = addPath && addPath.newPos + 1 < newLen;\n      var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n\n      if (!canAdd && !canRemove) {\n        bestPath[diagonalPath] = undefined;\n        continue;\n      }\n\n      if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n        basePath = clonePath(removePath);\n        pushComponent(basePath.components, false, true);\n      } else {\n        basePath = addPath;\n        basePath.newPos++;\n        pushComponent(basePath.components, true, false);\n      }\n\n      oldPos = extractCommon(basePath, newArr, oldArr, diagonalPath, equals);\n\n      if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        return buildValues(basePath.components);\n      } else {\n        bestPath[diagonalPath] = basePath;\n      }\n    }\n\n    editLength++;\n  }\n\n  while (editLength <= maxEditLength) {\n    var ret = execEditLength();\n\n    if (ret) {\n      return ret;\n    }\n  }\n}\n\nfunction extractCommon(basePath, newArr, oldArr, diagonalPath, equals) {\n  var newLen = newArr.length;\n  var oldLen = oldArr.length;\n  var newPos = basePath.newPos;\n  var oldPos = newPos - diagonalPath;\n  var commonCount = 0;\n\n  while (newPos + 1 < newLen && oldPos + 1 < oldLen && equals(newArr[newPos + 1], oldArr[oldPos + 1])) {\n    newPos++;\n    oldPos++;\n    commonCount++;\n  }\n\n  if (commonCount) {\n    basePath.components.push({\n      count: commonCount,\n      added: false,\n      removed: false,\n      indices: []\n    });\n  }\n\n  basePath.newPos = newPos;\n  return oldPos;\n}\n\nfunction pushComponent(components, added, removed) {\n  var last = components[components.length - 1];\n\n  if (last && last.added === added && last.removed === removed) {\n    components[components.length - 1] = {\n      count: last.count + 1,\n      added: added,\n      removed: removed,\n      indices: []\n    };\n  } else {\n    components.push({\n      count: 1,\n      added: added,\n      removed: removed,\n      indices: []\n    });\n  }\n}\n\nfunction buildValues(components) {\n  var componentPos = 0;\n  var componentLen = components.length;\n  var newPos = 0;\n  var oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n\n    if (!component.removed) {\n      var indices = [];\n\n      for (var i = newPos; i < newPos + component.count; i++) {\n        indices.push(i);\n      }\n\n      component.indices = indices;\n      newPos += component.count;\n\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      for (var i = oldPos; i < oldPos + component.count; i++) {\n        component.indices.push(i);\n      }\n\n      oldPos += component.count;\n    }\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return {\n    newPos: path.newPos,\n    components: path.components.slice(0)\n  };\n}\n\nexport default function arrayDiff(oldArr, newArr, equal) {\n  return diff(oldArr, newArr, equal);\n}","map":null,"metadata":{},"sourceType":"module"}