{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport { hasOwn, assert, isString, retrieve2, retrieve3, defaults, each, keys, isArrayLike, bind, isFunction, eqNaN, indexOf, clone } from 'zrender/lib/core/util';\nimport * as graphicUtil from '../../util/graphic';\nimport { setDefaultStateProxy, enableHoverEmphasis } from '../../util/states';\nimport * as labelStyleHelper from '../../label/labelStyle';\nimport { getDefaultLabel } from '../helper/labelHelper';\nimport createListFromArray from '../helper/createListFromArray';\nimport { getLayoutOnAxis } from '../../layout/barGrid';\nimport DataDiffer from '../../data/DataDiffer';\nimport SeriesModel from '../../model/Series';\nimport ChartView from '../../view/Chart';\nimport { createClipPath } from '../helper/createClipPathFromCoordSys';\nimport prepareCartesian2d from '../../coord/cartesian/prepareCustom';\nimport prepareGeo from '../../coord/geo/prepareCustom';\nimport prepareSingleAxis from '../../coord/single/prepareCustom';\nimport preparePolar from '../../coord/polar/prepareCustom';\nimport prepareCalendar from '../../coord/calendar/prepareCustom';\nimport { makeInner, normalizeToArray } from '../../util/model';\nimport { convertToEC4StyleForCustomSerise, isEC4CompatibleStyle, convertFromEC4CompatibleStyle, warnDeprecated } from '../../util/styleCompat';\nimport Transformable from 'zrender/lib/core/Transformable';\nimport { cloneValue } from 'zrender/lib/animation/Animator';\nimport { warn, throwError } from '../../util/log';\nimport { combine, isInAnyMorphing, morphPath, isCombiningPath, separate } from 'zrender/lib/tool/morphPath';\nimport * as matrix from 'zrender/lib/core/matrix';\nimport { createOrUpdatePatternFromDecal } from '../../util/decal';\nvar inner = makeInner();\nvar TRANSFORM_PROPS = {\n  x: 1,\n  y: 1,\n  scaleX: 1,\n  scaleY: 1,\n  originX: 1,\n  originY: 1,\n  rotation: 1\n};\nvar transformPropNamesStr = keys(TRANSFORM_PROPS).join(', ');\n; // Also compat with ec4, where\n// `visual('color') visual('borderColor')` is supported.\n\nvar STYLE_VISUAL_TYPE = {\n  color: 'fill',\n  borderColor: 'stroke'\n};\nvar NON_STYLE_VISUAL_PROPS = {\n  symbol: 1,\n  symbolSize: 1,\n  symbolKeepAspect: 1,\n  legendSymbol: 1,\n  visualMeta: 1,\n  liftZ: 1,\n  decal: 1\n};\nvar EMPHASIS = 'emphasis';\nvar NORMAL = 'normal';\nvar BLUR = 'blur';\nvar SELECT = 'select';\nvar STATES = [NORMAL, EMPHASIS, BLUR, SELECT];\nvar PATH_ITEM_STYLE = {\n  normal: ['itemStyle'],\n  emphasis: [EMPHASIS, 'itemStyle'],\n  blur: [BLUR, 'itemStyle'],\n  select: [SELECT, 'itemStyle']\n};\nvar PATH_LABEL = {\n  normal: ['label'],\n  emphasis: [EMPHASIS, 'label'],\n  blur: [BLUR, 'label'],\n  select: [SELECT, 'label']\n}; // Use prefix to avoid index to be the same as el.name,\n// which will cause weird update animation.\n\nvar GROUP_DIFF_PREFIX = 'e\\0\\0';\nvar attachedTxInfoTmp = {\n  normal: {},\n  emphasis: {},\n  blur: {},\n  select: {}\n};\nvar LEGACY_TRANSFORM_PROPS = {\n  position: ['x', 'y'],\n  scale: ['scaleX', 'scaleY'],\n  origin: ['originX', 'originY']\n};\nvar tmpTransformable = new Transformable();\n/**\n * To reduce total package size of each coordinate systems, the modules `prepareCustom`\n * of each coordinate systems are not required by each coordinate systems directly, but\n * required by the module `custom`.\n *\n * prepareInfoForCustomSeries {Function}: optional\n *     @return {Object} {coordSys: {...}, api: {\n *         coord: function (data, clamp) {}, // return point in global.\n *         size: function (dataSize, dataItem) {} // return size of each axis in coordSys.\n *     }}\n */\n\nvar prepareCustoms = {\n  cartesian2d: prepareCartesian2d,\n  geo: prepareGeo,\n  singleAxis: prepareSingleAxis,\n  polar: preparePolar,\n  calendar: prepareCalendar\n};\n\nvar CustomSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(CustomSeriesModel, _super);\n\n  function CustomSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CustomSeriesModel.type;\n    return _this;\n  }\n\n  CustomSeriesModel.prototype.optionUpdated = function () {\n    this.currentZLevel = this.get('zlevel', true);\n    this.currentZ = this.get('z', true);\n  };\n\n  CustomSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createListFromArray(this.getSource(), this);\n  };\n\n  CustomSeriesModel.prototype.getDataParams = function (dataIndex, dataType, el) {\n    var params = _super.prototype.getDataParams.call(this, dataIndex, dataType);\n\n    el && (params.info = inner(el).info);\n    return params;\n  };\n\n  CustomSeriesModel.type = 'series.custom';\n  CustomSeriesModel.dependencies = ['grid', 'polar', 'geo', 'singleAxis', 'calendar'];\n  CustomSeriesModel.defaultOption = {\n    coordinateSystem: 'cartesian2d',\n    zlevel: 0,\n    z: 2,\n    legendHoverLink: true,\n    // Custom series will not clip by default.\n    // Some case will use custom series to draw label\n    // For example https://echarts.apache.org/examples/en/editor.html?c=custom-gantt-flight\n    clip: false // Cartesian coordinate system\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // Polar coordinate system\n    // polarIndex: 0,\n    // Geo coordinate system\n    // geoIndex: 0,\n\n  };\n  return CustomSeriesModel;\n}(SeriesModel);\n\nvar CustomSeriesView =\n/** @class */\nfunction (_super) {\n  __extends(CustomSeriesView, _super);\n\n  function CustomSeriesView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CustomSeriesView.type;\n    return _this;\n  }\n\n  CustomSeriesView.prototype.render = function (customSeries, ecModel, api, payload) {\n    var oldData = this._data;\n    var data = customSeries.getData();\n    var group = this.group;\n    var renderItem = makeRenderItem(customSeries, data, ecModel, api); // By default, merge mode is applied. In most cases, custom series is\n    // used in the scenario that data amount is not large but graphic elements\n    // is complicated, where merge mode is probably necessary for optimization.\n    // For example, reuse graphic elements and only update the transform when\n    // roam or data zoom according to `actionType`.\n\n    var transOpt = customSeries.__transientTransitionOpt; // Enable user to disable transition animation by both set\n    // `from` and `to` dimension as `null`/`undefined`.\n\n    if (transOpt && (transOpt.from == null || transOpt.to == null)) {\n      oldData && oldData.each(function (oldIdx) {\n        doRemoveEl(oldData.getItemGraphicEl(oldIdx), customSeries, group);\n      });\n      data.each(function (newIdx) {\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, null);\n      });\n    } else {\n      var morphPreparation_1 = new MorphPreparation(customSeries, transOpt);\n      var diffMode = transOpt ? 'multiple' : 'oneToOne';\n      new DataDiffer(oldData ? oldData.getIndices() : [], data.getIndices(), createGetKey(oldData, diffMode, transOpt && transOpt.from), createGetKey(data, diffMode, transOpt && transOpt.to), null, diffMode).add(function (newIdx) {\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, null);\n      }).remove(function (oldIdx) {\n        doRemoveEl(oldData.getItemGraphicEl(oldIdx), customSeries, group);\n      }).update(function (newIdx, oldIdx) {\n        morphPreparation_1.reset('oneToOne');\n        var oldEl = oldData.getItemGraphicEl(oldIdx);\n        morphPreparation_1.findAndAddFrom(oldEl); // PENDING:\n        // if may morph, currently we alway recreate the whole el.\n        // because if reuse some of the el in the group tree, the old el has to\n        // be removed from the group, and consequently we can not calculate\n        // the \"global transition\" of the old element.\n        // But is there performance issue?\n\n        if (morphPreparation_1.hasFrom()) {\n          removeElementDirectly(oldEl, group);\n          oldEl = null;\n        }\n\n        createOrUpdateItem(api, oldEl, newIdx, renderItem(newIdx, payload), customSeries, group, data, morphPreparation_1);\n        morphPreparation_1.applyMorphing();\n      }).updateManyToOne(function (newIdx, oldIndices) {\n        morphPreparation_1.reset('manyToOne');\n\n        for (var i = 0; i < oldIndices.length; i++) {\n          var oldEl = oldData.getItemGraphicEl(oldIndices[i]);\n          morphPreparation_1.findAndAddFrom(oldEl);\n          removeElementDirectly(oldEl, group);\n        }\n\n        createOrUpdateItem(api, null, newIdx, renderItem(newIdx, payload), customSeries, group, data, morphPreparation_1);\n        morphPreparation_1.applyMorphing();\n      }).updateOneToMany(function (newIndices, oldIdx) {\n        morphPreparation_1.reset('oneToMany');\n        var newLen = newIndices.length;\n        var oldEl = oldData.getItemGraphicEl(oldIdx);\n        morphPreparation_1.findAndAddFrom(oldEl);\n        removeElementDirectly(oldEl, group);\n\n        for (var i = 0; i < newLen; i++) {\n          createOrUpdateItem(api, null, newIndices[i], renderItem(newIndices[i], payload), customSeries, group, data, morphPreparation_1);\n        }\n\n        morphPreparation_1.applyMorphing();\n      }).execute();\n    } // Do clipping\n\n\n    var clipPath = customSeries.get('clip', true) ? createClipPath(customSeries.coordinateSystem, false, customSeries) : null;\n\n    if (clipPath) {\n      group.setClipPath(clipPath);\n    } else {\n      group.removeClipPath();\n    }\n\n    this._data = data;\n  };\n\n  CustomSeriesView.prototype.incrementalPrepareRender = function (customSeries, ecModel, api) {\n    this.group.removeAll();\n    this._data = null;\n  };\n\n  CustomSeriesView.prototype.incrementalRender = function (params, customSeries, ecModel, api, payload) {\n    var data = customSeries.getData();\n    var renderItem = makeRenderItem(customSeries, data, ecModel, api);\n\n    function setIncrementalAndHoverLayer(el) {\n      if (!el.isGroup) {\n        el.incremental = true;\n        el.ensureState('emphasis').hoverLayer = true;\n      }\n    }\n\n    for (var idx = params.start; idx < params.end; idx++) {\n      var el = createOrUpdateItem(null, null, idx, renderItem(idx, payload), customSeries, this.group, data, null);\n      el.traverse(setIncrementalAndHoverLayer);\n    }\n  };\n\n  CustomSeriesView.prototype.filterForExposedEvent = function (eventType, query, targetEl, packedEvent) {\n    var elementName = query.element;\n\n    if (elementName == null || targetEl.name === elementName) {\n      return true;\n    } // Enable to give a name on a group made by `renderItem`, and listen\n    // events that triggerd by its descendents.\n\n\n    while ((targetEl = targetEl.__hostTarget || targetEl.parent) && targetEl !== this.group) {\n      if (targetEl.name === elementName) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  CustomSeriesView.type = 'custom';\n  return CustomSeriesView;\n}(ChartView);\n\nfunction createGetKey(data, diffMode, dimension) {\n  if (!data) {\n    return;\n  }\n\n  if (diffMode === 'oneToOne') {\n    return function (rawIdx, dataIndex) {\n      return data.getId(dataIndex);\n    };\n  }\n\n  var diffByDimName = data.getDimension(dimension);\n  var dimInfo = data.getDimensionInfo(diffByDimName);\n\n  if (!dimInfo) {\n    var errMsg = '';\n\n    if (process.env.NODE_ENV !== 'production') {\n      errMsg = dimension + \" is not a valid dimension.\";\n    }\n\n    throwError(errMsg);\n  }\n\n  var ordinalMeta = dimInfo.ordinalMeta;\n  return function (rawIdx, dataIndex) {\n    var key = data.get(diffByDimName, dataIndex);\n\n    if (ordinalMeta) {\n      key = ordinalMeta.categories[key];\n    }\n\n    return key == null || eqNaN(key) ? rawIdx + '' : '_ec_' + key;\n  };\n}\n\nfunction createEl(elOption) {\n  var graphicType = elOption.type;\n  var el; // Those graphic elements are not shapes. They should not be\n  // overwritten by users, so do them first.\n\n  if (graphicType === 'path') {\n    var shape = elOption.shape; // Using pathRect brings convenience to users sacle svg path.\n\n    var pathRect = shape.width != null && shape.height != null ? {\n      x: shape.x || 0,\n      y: shape.y || 0,\n      width: shape.width,\n      height: shape.height\n    } : null;\n    var pathData = getPathData(shape); // Path is also used for icon, so layout 'center' by default.\n\n    el = graphicUtil.makePath(pathData, null, pathRect, shape.layout || 'center');\n    inner(el).customPathData = pathData;\n  } else if (graphicType === 'image') {\n    el = new graphicUtil.Image({});\n    inner(el).customImagePath = elOption.style.image;\n  } else if (graphicType === 'text') {\n    el = new graphicUtil.Text({}); // inner(el).customText = (elOption.style as TextStyleProps).text;\n  } else if (graphicType === 'group') {\n    el = new graphicUtil.Group();\n  } else if (graphicType === 'compoundPath') {\n    throw new Error('\"compoundPath\" is not supported yet.');\n  } else {\n    var Clz = graphicUtil.getShapeClass(graphicType);\n\n    if (!Clz) {\n      var errMsg = '';\n\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'graphic type \"' + graphicType + '\" can not be found.';\n      }\n\n      throwError(errMsg);\n    }\n\n    el = new Clz();\n  }\n\n  inner(el).customGraphicType = graphicType;\n  el.name = elOption.name; // Compat ec4: the default z2 lift is 1. If changing the number,\n  // some cases probably be broken: hierarchy layout along z, like circle packing,\n  // where emphasis only intending to modify color/border rather than lift z2.\n\n  el.z2EmphasisLift = 1;\n  el.z2SelectLift = 1;\n  return el;\n}\n/**\n * ----------------------------------------------------------\n * [STRATEGY_MERGE] Merge properties or erase all properties:\n *\n * Based on the fact that the existing zr element probably be reused, we now consider whether\n * merge or erase all properties to the exsiting elements.\n * That is, if a certain props is not specified in the lastest return of `renderItem`:\n * + \"Merge\" means that do not modify the value on the existing element.\n * + \"Erase all\" means that use a default value to the existing element.\n *\n * \"Merge\" might bring some unexpected state retaining for users and \"erase all\" seams to be\n * more safe. \"erase all\" force users to specify all of the props each time, which is recommanded\n * in most cases.\n * But \"erase all\" theoretically disables the chance of performance optimization (e.g., just\n * generete shape and style at the first time rather than always do that).\n * So we still use \"merge\" rather than \"erase all\". If users need \"erase all\", they can\n * simple always set all of the props each time.\n * Some \"object-like\" config like `textConfig`, `textContent`, `style` which are not needed for\n * every elment, so we replace them only when user specify them. And the that is a total replace.\n *\n * TODO: there is no hint of 'isFirst' to users. So the performance enhancement can not be\n * performed yet. Consider the case:\n * (1) setOption to \"mergeChildren\" with a smaller children count\n * (2) Use dataZoom to make an item disappear.\n * (3) User dataZoom to make the item display again. At that time, renderItem need to return the\n * full option rather than partial option to recreate the element.\n *\n * ----------------------------------------------\n * [STRATEGY_NULL] `hasOwnProperty` or `== null`:\n *\n * Ditinguishing \"own property\" probably bring little trouble to user when make el options.\n * So we  trade a {xx: null} or {xx: undefined} as \"not specified\" if possible rather than\n * \"set them to null/undefined\". In most cases, props can not be cleared. Some typicall\n * clearable props like `style`/`textConfig`/`textContent` we enable `false` to means\n * \"clear\". In some othere special cases that the prop is able to set as null/undefined,\n * but not suitable to use `false`, `hasOwnProperty` is checked.\n *\n * ---------------------------------------------\n * [STRATEGY_TRANSITION] The rule of transition:\n * + For props on the root level of a element:\n *      If there is no `transition` specified, tansform props will be transitioned by default,\n *      which is the same as the previous setting in echarts4 and suitable for the scenario\n *      of dataZoom change.\n *      If `transition` specified, only the specified props will be transitioned.\n * + For props in `shape` and `style`:\n *      Only props specified in `transition` will be transitioned.\n * + Break:\n *      Since ec5, do not make transition to shape by default, because it might result in\n *      performance issue (especially `points` of polygon) and do not necessary in most cases.\n *\n * @return if `isMorphTo`, return `allPropsFinal`.\n */\n\n\nfunction updateElNormal( // Can be null/undefined\napi, el, // Whether be a morph target.\nisMorphTo, dataIndex, elOption, styleOpt, attachedTxInfo, seriesModel, isInit, isTextContent) {\n  var transFromProps = {};\n  var allPropsFinal = {};\n  var elDisplayable = el.isGroup ? null : el; // If be \"morph to\", delay the `updateElNormal` when all of the els in\n  // this data item processed. Because at that time we can get all of the\n  // \"morph from\" and make correct separate/combine.\n\n  !isMorphTo && prepareShapeOrExtraTransitionFrom('shape', el, null, elOption, transFromProps, isInit);\n  prepareShapeOrExtraAllPropsFinal('shape', elOption, allPropsFinal);\n  !isMorphTo && prepareShapeOrExtraTransitionFrom('extra', el, null, elOption, transFromProps, isInit);\n  prepareShapeOrExtraAllPropsFinal('extra', elOption, allPropsFinal);\n  !isMorphTo && prepareTransformTransitionFrom(el, null, elOption, transFromProps, isInit);\n  prepareTransformAllPropsFinal(elOption, allPropsFinal);\n  var txCfgOpt = attachedTxInfo && attachedTxInfo.normal.cfg;\n\n  if (txCfgOpt) {\n    // PENDING: whether use user object directly rather than clone?\n    // TODO:5.0 textConfig transition animation?\n    el.setTextConfig(txCfgOpt);\n  }\n\n  if (el.type === 'text' && styleOpt) {\n    var textOptionStyle = styleOpt; // Compatible with ec4: if `textFill` or `textStroke` exists use them.\n\n    hasOwn(textOptionStyle, 'textFill') && (textOptionStyle.fill = textOptionStyle.textFill);\n    hasOwn(textOptionStyle, 'textStroke') && (textOptionStyle.stroke = textOptionStyle.textStroke);\n  }\n\n  if (styleOpt) {\n    var decalPattern = void 0;\n    var decalObj = isPath(el) ? styleOpt.decal : null;\n\n    if (api && decalObj) {\n      decalObj.dirty = true;\n      decalPattern = createOrUpdatePatternFromDecal(decalObj, api);\n    } // Always overwrite in case user specify this prop.\n\n\n    styleOpt.__decalPattern = decalPattern;\n  }\n\n  !isMorphTo && prepareStyleTransitionFrom(el, null, elOption, styleOpt, transFromProps, isInit);\n\n  if (elDisplayable) {\n    hasOwn(elOption, 'invisible') && (elDisplayable.invisible = elOption.invisible);\n  } // If `isMorphTo`, we should not update these props to el directly, otherwise,\n  // when applying morph finally, the original prop are missing for making \"animation from\".\n\n\n  if (!isMorphTo) {\n    applyPropsFinal(el, allPropsFinal, styleOpt);\n    applyTransitionFrom(el, dataIndex, elOption, seriesModel, transFromProps, isInit);\n  } // Merge by default.\n\n\n  hasOwn(elOption, 'silent') && (el.silent = elOption.silent);\n  hasOwn(elOption, 'ignore') && (el.ignore = elOption.ignore);\n\n  if (!isTextContent) {\n    // `elOption.info` enables user to mount some info on\n    // elements and use them in event handlers.\n    // Update them only when user specified, otherwise, remain.\n    hasOwn(elOption, 'info') && (inner(el).info = elOption.info);\n  }\n\n  styleOpt ? el.dirty() : el.markRedraw();\n  return isMorphTo ? allPropsFinal : null;\n}\n\nfunction applyPropsFinal(el, // Can be null/undefined\nallPropsFinal, styleOpt) {\n  var elDisplayable = el.isGroup ? null : el;\n\n  if (elDisplayable && styleOpt) {\n    var decalPattern = styleOpt.__decalPattern;\n    var originalDecalObj = void 0;\n\n    if (decalPattern) {\n      originalDecalObj = styleOpt.decal;\n      styleOpt.decal = decalPattern;\n    } // PENDING: here the input style object is used directly.\n    // Good for performance but bad for compatibility control.\n\n\n    elDisplayable.useStyle(styleOpt);\n\n    if (decalPattern) {\n      styleOpt.decal = originalDecalObj;\n    } // When style object changed, how to trade the existing animation?\n    // It is probably conplicated and not needed to cover all the cases.\n    // But still need consider the case:\n    // (1) When using init animation on `style.opacity`, and before the animation\n    //     ended users triggers an update by mousewhell. At that time the init\n    //     animation should better be continued rather than terminated.\n    //     So after `useStyle` called, we should change the animation target manually\n    //     to continue the effect of the init animation.\n    // (2) PENDING: If the previous animation targeted at a `val1`, and currently we need\n    //     to update the value to `val2` and no animation declared, should be terminate\n    //     the previous animation or just modify the target of the animation?\n    //     Therotically That will happen not only on `style` but also on `shape` and\n    //     `transfrom` props. But we haven't handle this case at present yet.\n    // (3) PENDING: Is it proper to visit `animators` and `targetName`?\n\n\n    var animators = elDisplayable.animators;\n\n    for (var i = 0; i < animators.length; i++) {\n      var animator = animators[i]; // targetName is the \"topKey\".\n\n      if (animator.targetName === 'style') {\n        animator.changeTarget(elDisplayable.style);\n      }\n    }\n  } // Set el to the final state firstly.\n\n\n  allPropsFinal && el.attr(allPropsFinal);\n}\n\nfunction applyTransitionFrom(el, dataIndex, elOption, seriesModel, // Can be null/undefined\ntransFromProps, isInit) {\n  if (transFromProps) {\n    // Do not use `el.updateDuringAnimation` here becuase `el.updateDuringAnimation` will\n    // be called mutiple time in each animation frame. For example, if both \"transform\" props\n    // and shape props and style props changed, it will generate three animator and called\n    // one-by-one in each animation frame.\n    // We use the during in `animateTo/From` params.\n    var userDuring = elOption.during; // For simplicity, if during not specified, the previous during will not work any more.\n\n    inner(el).userDuring = userDuring;\n    var cfgDuringCall = userDuring ? bind(duringCall, {\n      el: el,\n      userDuring: userDuring\n    }) : null;\n    var cfg = {\n      dataIndex: dataIndex,\n      isFrom: true,\n      during: cfgDuringCall\n    };\n    isInit ? graphicUtil.initProps(el, transFromProps, seriesModel, cfg) : graphicUtil.updateProps(el, transFromProps, seriesModel, cfg);\n  }\n} // See [STRATEGY_TRANSITION]\n\n\nfunction prepareShapeOrExtraTransitionFrom(mainAttr, el, morphFromEl, elOption, transFromProps, isInit) {\n  var attrOpt = elOption[mainAttr];\n\n  if (!attrOpt) {\n    return;\n  }\n\n  var elPropsInAttr = el[mainAttr];\n  var transFromPropsInAttr;\n  var enterFrom = attrOpt.enterFrom;\n\n  if (isInit && enterFrom) {\n    !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n    var enterFromKeys = keys(enterFrom);\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      // `enterFrom` props are not necessarily also declared in `shape`/`style`/...,\n      // for example, `opacity` can only declared in `enterFrom` but not in `style`.\n      var key = enterFromKeys[i]; // Do not clone, animator will perform that clone.\n\n      transFromPropsInAttr[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit && elPropsInAttr // Just ignore shape animation in morphing.\n  && !(morphFromEl != null && mainAttr === 'shape')) {\n    if (attrOpt.transition) {\n      !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n      var transitionKeys = normalizeToArray(attrOpt.transition);\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n        var elVal = elPropsInAttr[key];\n\n        if (process.env.NODE_ENV !== 'production') {\n          checkNonStyleTansitionRefer(key, attrOpt[key], elVal);\n        } // Do not clone, see `checkNonStyleTansitionRefer`.\n\n\n        transFromPropsInAttr[key] = elVal;\n      }\n    } else if (indexOf(elOption.transition, mainAttr) >= 0) {\n      !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});\n      var elPropsInAttrKeys = keys(elPropsInAttr);\n\n      for (var i = 0; i < elPropsInAttrKeys.length; i++) {\n        var key = elPropsInAttrKeys[i];\n        var elVal = elPropsInAttr[key];\n\n        if (isNonStyleTransitionEnabled(attrOpt[key], elVal)) {\n          transFromPropsInAttr[key] = elVal;\n        }\n      }\n    }\n  }\n\n  var leaveTo = attrOpt.leaveTo;\n\n  if (leaveTo) {\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToPropsInAttr = leaveToProps[mainAttr] || (leaveToProps[mainAttr] = {});\n    var leaveToKeys = keys(leaveTo);\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n      leaveToPropsInAttr[key] = leaveTo[key];\n    }\n  }\n}\n\nfunction prepareShapeOrExtraAllPropsFinal(mainAttr, elOption, allProps) {\n  var attrOpt = elOption[mainAttr];\n\n  if (!attrOpt) {\n    return;\n  }\n\n  var allPropsInAttr = allProps[mainAttr] = {};\n  var keysInAttr = keys(attrOpt);\n\n  for (var i = 0; i < keysInAttr.length; i++) {\n    var key = keysInAttr[i]; // To avoid share one object with different element, and\n    // to avoid user modify the object inexpectedly, have to clone.\n\n    allPropsInAttr[key] = cloneValue(attrOpt[key]);\n  }\n} // See [STRATEGY_TRANSITION].\n\n\nfunction prepareTransformTransitionFrom(el, morphFromEl, elOption, transFromProps, isInit) {\n  var enterFrom = elOption.enterFrom;\n\n  if (isInit && enterFrom) {\n    var enterFromKeys = keys(enterFrom);\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      var key = enterFromKeys[i];\n\n      if (process.env.NODE_ENV !== 'production') {\n        checkTransformPropRefer(key, 'el.enterFrom');\n      } // Do not clone, animator will perform that clone.\n\n\n      transFromProps[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit) {\n    // If morphing, force transition all transform props.\n    // otherwise might have incorrect morphing animation.\n    if (morphFromEl) {\n      var fromTransformable = calcOldElLocalTransformBasedOnNewElParent(morphFromEl, el);\n      setTransformPropToTransitionFrom(transFromProps, 'x', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'y', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'scaleX', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'scaleY', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'originX', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'originY', fromTransformable);\n      setTransformPropToTransitionFrom(transFromProps, 'rotation', fromTransformable);\n    } else if (elOption.transition) {\n      var transitionKeys = normalizeToArray(elOption.transition);\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n\n        if (key === 'style' || key === 'shape' || key === 'extra') {\n          continue;\n        }\n\n        var elVal = el[key];\n\n        if (process.env.NODE_ENV !== 'production') {\n          checkTransformPropRefer(key, 'el.transition');\n          checkNonStyleTansitionRefer(key, elOption[key], elVal);\n        } // Do not clone, see `checkNonStyleTansitionRefer`.\n\n\n        transFromProps[key] = elVal;\n      }\n    } // This default transition see [STRATEGY_TRANSITION]\n    else {\n        setTransformPropToTransitionFrom(transFromProps, 'x', el);\n        setTransformPropToTransitionFrom(transFromProps, 'y', el);\n      }\n  }\n\n  var leaveTo = elOption.leaveTo;\n\n  if (leaveTo) {\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToKeys = keys(leaveTo);\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n\n      if (process.env.NODE_ENV !== 'production') {\n        checkTransformPropRefer(key, 'el.leaveTo');\n      }\n\n      leaveToProps[key] = leaveTo[key];\n    }\n  }\n}\n\nfunction prepareTransformAllPropsFinal(elOption, allProps) {\n  setLagecyTransformProp(elOption, allProps, 'position');\n  setLagecyTransformProp(elOption, allProps, 'scale');\n  setLagecyTransformProp(elOption, allProps, 'origin');\n  setTransformProp(elOption, allProps, 'x');\n  setTransformProp(elOption, allProps, 'y');\n  setTransformProp(elOption, allProps, 'scaleX');\n  setTransformProp(elOption, allProps, 'scaleY');\n  setTransformProp(elOption, allProps, 'originX');\n  setTransformProp(elOption, allProps, 'originY');\n  setTransformProp(elOption, allProps, 'rotation');\n} // See [STRATEGY_TRANSITION].\n\n\nfunction prepareStyleTransitionFrom(el, morphFromEl, elOption, styleOpt, transFromProps, isInit) {\n  if (!styleOpt) {\n    return;\n  } // At present in \"many-to-one\"/\"one-to-many\" case, to not support \"many\" have\n  // different styles and make style transitions. That might be a rare case.\n\n\n  var fromEl = morphFromEl || el;\n  var fromElStyle = fromEl.style;\n  var transFromStyleProps;\n  var enterFrom = styleOpt.enterFrom;\n\n  if (isInit && enterFrom) {\n    var enterFromKeys = keys(enterFrom);\n    !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n\n    for (var i = 0; i < enterFromKeys.length; i++) {\n      var key = enterFromKeys[i]; // Do not clone, animator will perform that clone.\n\n      transFromStyleProps[key] = enterFrom[key];\n    }\n  }\n\n  if (!isInit && fromElStyle) {\n    if (styleOpt.transition) {\n      var transitionKeys = normalizeToArray(styleOpt.transition);\n      !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n\n      for (var i = 0; i < transitionKeys.length; i++) {\n        var key = transitionKeys[i];\n        var elVal = fromElStyle[key]; // Do not clone, see `checkNonStyleTansitionRefer`.\n\n        transFromStyleProps[key] = elVal;\n      }\n    } else if (el.getAnimationStyleProps && indexOf(elOption.transition, 'style') >= 0) {\n      var animationProps = el.getAnimationStyleProps();\n      var animationStyleProps = animationProps ? animationProps.style : null;\n\n      if (animationStyleProps) {\n        !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});\n        var styleKeys = keys(styleOpt);\n\n        for (var i = 0; i < styleKeys.length; i++) {\n          var key = styleKeys[i];\n\n          if (animationStyleProps[key]) {\n            var elVal = fromElStyle[key];\n            transFromStyleProps[key] = elVal;\n          }\n        }\n      }\n    }\n  }\n\n  var leaveTo = styleOpt.leaveTo;\n\n  if (leaveTo) {\n    var leaveToKeys = keys(leaveTo);\n    var leaveToProps = getOrCreateLeaveToPropsFromEl(el);\n    var leaveToStyleProps = leaveToProps.style || (leaveToProps.style = {});\n\n    for (var i = 0; i < leaveToKeys.length; i++) {\n      var key = leaveToKeys[i];\n      leaveToStyleProps[key] = leaveTo[key];\n    }\n  }\n}\n/**\n * If make \"transform\"(x/y/scaleX/scaleY/orient/originX/originY) transition between\n * two path elements that have different hierarchy, before we retrieve the \"from\" props,\n * we have to calculate the local transition of the \"oldPath\" based on the parent of\n * the \"newPath\".\n * At present, the case only happend in \"morphing\". Without morphing, the transform\n * transition are all between elements in the same hierarchy, where this kind of process\n * is not needed.\n *\n * [CAVEAT]:\n * This method makes sense only if: (very tricky)\n * (1) \"newEl\" has been added to its final parent.\n * (2) Local transform props of \"newPath.parent\" are not at their final value but already\n * have been at the \"from value\".\n *     This is currently ensured by:\n *     (2.1) \"graphicUtil.animationFrom\", which will set the element to the \"from value\"\n *     immediately.\n *     (2.2) \"morph\" option is not allowed to be set on Group, so all of the groups have\n *     been finished their \"updateElNormal\" when calling this method in morphing process.\n */\n\n\nfunction calcOldElLocalTransformBasedOnNewElParent(oldEl, newEl) {\n  if (!oldEl || oldEl === newEl || oldEl.parent === newEl.parent) {\n    return oldEl;\n  } // Not sure oldEl is rendered (may have \"lazyUpdate\"),\n  // so always call `getComputedTransform`.\n\n\n  var tmpM = tmpTransformable.transform || (tmpTransformable.transform = matrix.identity([]));\n  var oldGlobalTransform = oldEl.getComputedTransform();\n  oldGlobalTransform ? matrix.copy(tmpM, oldGlobalTransform) : matrix.identity(tmpM);\n  var newParent = newEl.parent;\n\n  if (newParent) {\n    newParent.getComputedTransform();\n  }\n\n  tmpTransformable.originX = oldEl.originX;\n  tmpTransformable.originY = oldEl.originY;\n  tmpTransformable.parent = newParent;\n  tmpTransformable.decomposeTransform();\n  return tmpTransformable;\n}\n\nvar checkNonStyleTansitionRefer;\n\nif (process.env.NODE_ENV !== 'production') {\n  checkNonStyleTansitionRefer = function checkNonStyleTansitionRefer(propName, optVal, elVal) {\n    if (!isArrayLike(optVal)) {\n      assert(optVal != null && isFinite(optVal), 'Prop `' + propName + '` must refer to a finite number or ArrayLike for transition.');\n    } else {\n      // Try not to copy array for performance, but if user use the same object in different\n      // call of `renderItem`, it will casue animation transition fail.\n      assert(optVal !== elVal, 'Prop `' + propName + '` must use different Array object each time for transition.');\n    }\n  };\n}\n\nfunction isNonStyleTransitionEnabled(optVal, elVal) {\n  // The same as `checkNonStyleTansitionRefer`.\n  return !isArrayLike(optVal) ? optVal != null && isFinite(optVal) : optVal !== elVal;\n}\n\nvar checkTransformPropRefer;\n\nif (process.env.NODE_ENV !== 'production') {\n  checkTransformPropRefer = function checkTransformPropRefer(key, usedIn) {\n    assert(hasOwn(TRANSFORM_PROPS, key), 'Prop `' + key + '` is not a permitted in `' + usedIn + '`. ' + 'Only `' + keys(TRANSFORM_PROPS).join('`, `') + '` are permitted.');\n  };\n}\n\nfunction getOrCreateLeaveToPropsFromEl(el) {\n  var innerEl = inner(el);\n  return innerEl.leaveToProps || (innerEl.leaveToProps = {});\n} // Use it to avoid it be exposed to user.\n\n\nvar tmpDuringScope = {};\nvar customDuringAPI = {\n  // Usually other props do not need to be changed in animation during.\n  setTransform: function setTransform(key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(hasOwn(TRANSFORM_PROPS, key), 'Only ' + transformPropNamesStr + ' available in `setTransform`.');\n    }\n\n    tmpDuringScope.el[key] = val;\n    return this;\n  },\n  getTransform: function getTransform(key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(hasOwn(TRANSFORM_PROPS, key), 'Only ' + transformPropNamesStr + ' available in `getTransform`.');\n    }\n\n    return tmpDuringScope.el[key];\n  },\n  setShape: function setShape(key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var shape = tmpDuringScope.el.shape || (tmpDuringScope.el.shape = {});\n    shape[key] = val;\n    tmpDuringScope.isShapeDirty = true;\n    return this;\n  },\n  getShape: function getShape(key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var shape = tmpDuringScope.el.shape;\n\n    if (shape) {\n      return shape[key];\n    }\n  },\n  setStyle: function setStyle(key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var style = tmpDuringScope.el.style;\n\n    if (style) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (eqNaN(val)) {\n          warn('style.' + key + ' must not be assigned with NaN.');\n        }\n      }\n\n      style[key] = val;\n      tmpDuringScope.isStyleDirty = true;\n    }\n\n    return this;\n  },\n  getStyle: function getStyle(key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var style = tmpDuringScope.el.style;\n\n    if (style) {\n      return style[key];\n    }\n  },\n  setExtra: function setExtra(key, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var extra = tmpDuringScope.el.extra || (tmpDuringScope.el.extra = {});\n    extra[key] = val;\n    return this;\n  },\n  getExtra: function getExtra(key) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotReserved(key);\n    }\n\n    var extra = tmpDuringScope.el.extra;\n\n    if (extra) {\n      return extra[key];\n    }\n  }\n};\n\nfunction assertNotReserved(key) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (key === 'transition' || key === 'enterFrom' || key === 'leaveTo') {\n      throw new Error('key must not be \"' + key + '\"');\n    }\n  }\n}\n\nfunction duringCall() {\n  // Do not provide \"percent\" until some requirements come.\n  // Because consider thies case:\n  // enterFrom: {x: 100, y: 30}, transition: 'x'.\n  // And enter duration is different from update duration.\n  // Thus it might be confused about the meaning of \"percent\" in during callback.\n  var scope = this;\n  var el = scope.el;\n\n  if (!el) {\n    return;\n  } // If el is remove from zr by reason like legend, during still need to called,\n  // becuase el will be added back to zr and the prop value should not be incorrect.\n\n\n  var newstUserDuring = inner(el).userDuring;\n  var scopeUserDuring = scope.userDuring; // Ensured a during is only called once in each animation frame.\n  // If a during is called multiple times in one frame, maybe some users' calulation logic\n  // might be wrong (not sure whether this usage exists).\n  // The case of a during might be called twice can be: by default there is a animator for\n  // 'x', 'y' when init. Before the init animation finished, call `setOption` to start\n  // another animators for 'style'/'shape'/'extra'.\n\n  if (newstUserDuring !== scopeUserDuring) {\n    // release\n    scope.el = scope.userDuring = null;\n    return;\n  }\n\n  tmpDuringScope.el = el;\n  tmpDuringScope.isShapeDirty = false;\n  tmpDuringScope.isStyleDirty = false; // Give no `this` to user in \"during\" calling.\n\n  scopeUserDuring(customDuringAPI);\n\n  if (tmpDuringScope.isShapeDirty && el.dirtyShape) {\n    el.dirtyShape();\n  }\n\n  if (tmpDuringScope.isStyleDirty && el.dirtyStyle) {\n    el.dirtyStyle();\n  } // markRedraw() will be called by default in during.\n  // FIXME `this.markRedraw();` directly ?\n  // FIXME: if in future meet the case that some prop will be both modified in `during` and `state`,\n  // consider the issue that the prop might be incorrect when return to \"normal\" state.\n\n}\n\nfunction updateElOnState(state, el, elStateOpt, styleOpt, attachedTxInfo, isRoot, isTextContent) {\n  var elDisplayable = el.isGroup ? null : el;\n  var txCfgOpt = attachedTxInfo && attachedTxInfo[state].cfg; // PENDING:5.0 support customize scale change and transition animation?\n\n  if (elDisplayable) {\n    // By default support auto lift color when hover whether `emphasis` specified.\n    var stateObj = elDisplayable.ensureState(state);\n\n    if (styleOpt === false) {\n      var existingEmphasisState = elDisplayable.getState(state);\n\n      if (existingEmphasisState) {\n        existingEmphasisState.style = null;\n      }\n    } else {\n      // style is needed to enable defaut emphasis.\n      stateObj.style = styleOpt || null;\n    } // If `elOption.styleEmphasis` or `elOption.emphasis.style` is `false`,\n    // remove hover style.\n    // If `elOption.textConfig` or `elOption.emphasis.textConfig` is null/undefined, it does not\n    // make sense. So for simplicity, we do not ditinguish `hasOwnProperty` and null/undefined.\n\n\n    if (txCfgOpt) {\n      stateObj.textConfig = txCfgOpt;\n    }\n\n    setDefaultStateProxy(elDisplayable);\n  }\n}\n\nfunction updateZ(el, elOption, seriesModel, attachedTxInfo) {\n  // Group not support textContent and not support z yet.\n  if (el.isGroup) {\n    return;\n  }\n\n  var elDisplayable = el;\n  var currentZ = seriesModel.currentZ;\n  var currentZLevel = seriesModel.currentZLevel; // Always erase.\n\n  elDisplayable.z = currentZ;\n  elDisplayable.zlevel = currentZLevel; // z2 must not be null/undefined, otherwise sort error may occur.\n\n  var optZ2 = elOption.z2;\n  optZ2 != null && (elDisplayable.z2 = optZ2 || 0);\n\n  for (var i = 0; i < STATES.length; i++) {\n    updateZForEachState(elDisplayable, elOption, STATES[i]);\n  }\n}\n\nfunction updateZForEachState(elDisplayable, elOption, state) {\n  var isNormal = state === NORMAL;\n  var elStateOpt = isNormal ? elOption : retrieveStateOption(elOption, state);\n  var optZ2 = elStateOpt ? elStateOpt.z2 : null;\n  var stateObj;\n\n  if (optZ2 != null) {\n    // Do not `ensureState` until required.\n    stateObj = isNormal ? elDisplayable : elDisplayable.ensureState(state);\n    stateObj.z2 = optZ2 || 0;\n  }\n}\n\nfunction setLagecyTransformProp(elOption, targetProps, legacyName, fromTransformable // If provided, retrieve from the element.\n) {\n  var legacyArr = elOption[legacyName];\n  var xyName = LEGACY_TRANSFORM_PROPS[legacyName];\n\n  if (legacyArr) {\n    if (fromTransformable) {\n      targetProps[xyName[0]] = fromTransformable[xyName[0]];\n      targetProps[xyName[1]] = fromTransformable[xyName[1]];\n    } else {\n      targetProps[xyName[0]] = legacyArr[0];\n      targetProps[xyName[1]] = legacyArr[1];\n    }\n  }\n}\n\nfunction setTransformProp(elOption, allProps, name, fromTransformable // If provided, retrieve from the element.\n) {\n  if (elOption[name] != null) {\n    allProps[name] = fromTransformable ? fromTransformable[name] : elOption[name];\n  }\n}\n\nfunction setTransformPropToTransitionFrom(transitionFrom, name, fromTransformable // If provided, retrieve from the element.\n) {\n  if (fromTransformable) {\n    transitionFrom[name] = fromTransformable[name];\n  }\n}\n\nfunction makeRenderItem(customSeries, data, ecModel, api) {\n  var renderItem = customSeries.get('renderItem');\n  var coordSys = customSeries.coordinateSystem;\n  var prepareResult = {};\n\n  if (coordSys) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(renderItem, 'series.render is required.');\n      assert(coordSys.prepareCustoms || prepareCustoms[coordSys.type], 'This coordSys does not support custom series.');\n    } // `coordSys.prepareCustoms` is used for external coord sys like bmap.\n\n\n    prepareResult = coordSys.prepareCustoms ? coordSys.prepareCustoms(coordSys) : prepareCustoms[coordSys.type](coordSys);\n  }\n\n  var userAPI = defaults({\n    getWidth: api.getWidth,\n    getHeight: api.getHeight,\n    getZr: api.getZr,\n    getDevicePixelRatio: api.getDevicePixelRatio,\n    value: value,\n    style: style,\n    ordinalRawValue: ordinalRawValue,\n    styleEmphasis: styleEmphasis,\n    visual: visual,\n    barLayout: barLayout,\n    currentSeriesIndices: currentSeriesIndices,\n    font: font\n  }, prepareResult.api || {});\n  var userParams = {\n    // The life cycle of context: current round of rendering.\n    // The global life cycle is probably not necessary, because\n    // user can store global status by themselves.\n    context: {},\n    seriesId: customSeries.id,\n    seriesName: customSeries.name,\n    seriesIndex: customSeries.seriesIndex,\n    coordSys: prepareResult.coordSys,\n    dataInsideLength: data.count(),\n    encode: wrapEncodeDef(customSeries.getData())\n  }; // If someday intending to refactor them to a class, should consider do not\n  // break change: currently these attribute member are encapsulated in a closure\n  // so that do not need to force user to call these method with a scope.\n  // Do not support call `api` asynchronously without dataIndexInside input.\n\n  var currDataIndexInside;\n  var currItemModel;\n  var currItemStyleModels = {};\n  var currLabelModels = {};\n  var seriesItemStyleModels = {};\n  var seriesLabelModels = {};\n\n  for (var i = 0; i < STATES.length; i++) {\n    var stateName = STATES[i];\n    seriesItemStyleModels[stateName] = customSeries.getModel(PATH_ITEM_STYLE[stateName]);\n    seriesLabelModels[stateName] = customSeries.getModel(PATH_LABEL[stateName]);\n  }\n\n  function getItemModel(dataIndexInside) {\n    return dataIndexInside === currDataIndexInside ? currItemModel || (currItemModel = data.getItemModel(dataIndexInside)) : data.getItemModel(dataIndexInside);\n  }\n\n  function getItemStyleModel(dataIndexInside, state) {\n    return !data.hasItemOption ? seriesItemStyleModels[state] : dataIndexInside === currDataIndexInside ? currItemStyleModels[state] || (currItemStyleModels[state] = getItemModel(dataIndexInside).getModel(PATH_ITEM_STYLE[state])) : getItemModel(dataIndexInside).getModel(PATH_ITEM_STYLE[state]);\n  }\n\n  function getLabelModel(dataIndexInside, state) {\n    return !data.hasItemOption ? seriesLabelModels[state] : dataIndexInside === currDataIndexInside ? currLabelModels[state] || (currLabelModels[state] = getItemModel(dataIndexInside).getModel(PATH_LABEL[state])) : getItemModel(dataIndexInside).getModel(PATH_LABEL[state]);\n  }\n\n  return function (dataIndexInside, payload) {\n    currDataIndexInside = dataIndexInside;\n    currItemModel = null;\n    currItemStyleModels = {};\n    currLabelModels = {};\n    return renderItem && renderItem(defaults({\n      dataIndexInside: dataIndexInside,\n      dataIndex: data.getRawIndex(dataIndexInside),\n      // Can be used for optimization when zoom or roam.\n      actionType: payload ? payload.type : null\n    }, userParams), userAPI);\n  };\n  /**\n   * @public\n   * @param dim by default 0.\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n  function value(dim, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    return data.get(data.getDimension(dim || 0), dataIndexInside);\n  }\n  /**\n   * @public\n   * @param dim by default 0.\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function ordinalRawValue(dim, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var dimInfo = data.getDimensionInfo(dim || 0);\n\n    if (!dimInfo) {\n      return;\n    }\n\n    var val = data.get(dimInfo.name, dataIndexInside);\n    var ordinalMeta = dimInfo && dimInfo.ordinalMeta;\n    return ordinalMeta ? ordinalMeta.categories[val] : val;\n  }\n  /**\n   * @deprecated The orgininal intention of `api.style` is enable to set itemStyle\n   * like other series. But it not necessary and not easy to give a strict definition\n   * of what it return. And since echarts5 it needs to be make compat work. So\n   * deprecates it since echarts5.\n   *\n   * By default, `visual` is applied to style (to support visualMap).\n   * `visual.color` is applied at `fill`. If user want apply visual.color on `stroke`,\n   * it can be implemented as:\n   * `api.style({stroke: api.visual('color'), fill: null})`;\n   *\n   * [Compat]: since ec5, RectText has been separated from its hosts el.\n   * so `api.style()` will only return the style from `itemStyle` but not handle `label`\n   * any more. But `series.label` config is never published in doc.\n   * We still compat it in `api.style()`. But not encourage to use it and will still not\n   * to pulish it to doc.\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function style(userProps, dataIndexInside) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecated('api.style', 'Please write literal style directly instead.');\n    }\n\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var style = data.getItemVisual(dataIndexInside, 'style');\n    var visualColor = style && style.fill;\n    var opacity = style && style.opacity;\n    var itemStyle = getItemStyleModel(dataIndexInside, NORMAL).getItemStyle();\n    visualColor != null && (itemStyle.fill = visualColor);\n    opacity != null && (itemStyle.opacity = opacity);\n    var opt = {\n      inheritColor: isString(visualColor) ? visualColor : '#000'\n    };\n    var labelModel = getLabelModel(dataIndexInside, NORMAL); // Now that the feture of \"auto adjust text fill/stroke\" has been migrated to zrender\n    // since ec5, we should set `isAttached` as `false` here and make compat in\n    // `convertToEC4StyleForCustomSerise`.\n\n    var textStyle = labelStyleHelper.createTextStyle(labelModel, null, opt, false, true);\n    textStyle.text = labelModel.getShallow('show') ? retrieve2(customSeries.getFormattedLabel(dataIndexInside, NORMAL), getDefaultLabel(data, dataIndexInside)) : null;\n    var textConfig = labelStyleHelper.createTextConfig(labelModel, opt, false);\n    preFetchFromExtra(userProps, itemStyle);\n    itemStyle = convertToEC4StyleForCustomSerise(itemStyle, textStyle, textConfig);\n    userProps && applyUserPropsAfter(itemStyle, userProps);\n    itemStyle.legacy = true;\n    return itemStyle;\n  }\n  /**\n   * @deprecated The reason see `api.style()`\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function styleEmphasis(userProps, dataIndexInside) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecated('api.styleEmphasis', 'Please write literal style directly instead.');\n    }\n\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n    var itemStyle = getItemStyleModel(dataIndexInside, EMPHASIS).getItemStyle();\n    var labelModel = getLabelModel(dataIndexInside, EMPHASIS);\n    var textStyle = labelStyleHelper.createTextStyle(labelModel, null, null, true, true);\n    textStyle.text = labelModel.getShallow('show') ? retrieve3(customSeries.getFormattedLabel(dataIndexInside, EMPHASIS), customSeries.getFormattedLabel(dataIndexInside, NORMAL), getDefaultLabel(data, dataIndexInside)) : null;\n    var textConfig = labelStyleHelper.createTextConfig(labelModel, null, true);\n    preFetchFromExtra(userProps, itemStyle);\n    itemStyle = convertToEC4StyleForCustomSerise(itemStyle, textStyle, textConfig);\n    userProps && applyUserPropsAfter(itemStyle, userProps);\n    itemStyle.legacy = true;\n    return itemStyle;\n  }\n\n  function applyUserPropsAfter(itemStyle, extra) {\n    for (var key in extra) {\n      if (hasOwn(extra, key)) {\n        itemStyle[key] = extra[key];\n      }\n    }\n  }\n\n  function preFetchFromExtra(extra, itemStyle) {\n    // A trick to retrieve those props firstly, which are used to\n    // apply auto inside fill/stroke in `convertToEC4StyleForCustomSerise`.\n    // (It's not reasonable but only for a degree of compat)\n    if (extra) {\n      extra.textFill && (itemStyle.textFill = extra.textFill);\n      extra.textPosition && (itemStyle.textPosition = extra.textPosition);\n    }\n  }\n  /**\n   * @public\n   * @param dataIndexInside by default `currDataIndexInside`.\n   */\n\n\n  function visual(visualType, dataIndexInside) {\n    dataIndexInside == null && (dataIndexInside = currDataIndexInside);\n\n    if (hasOwn(STYLE_VISUAL_TYPE, visualType)) {\n      var style_1 = data.getItemVisual(dataIndexInside, 'style');\n      return style_1 ? style_1[STYLE_VISUAL_TYPE[visualType]] : null;\n    } // Only support these visuals. Other visual might be inner tricky\n    // for performance (like `style`), do not expose to users.\n\n\n    if (hasOwn(NON_STYLE_VISUAL_PROPS, visualType)) {\n      return data.getItemVisual(dataIndexInside, visualType);\n    }\n  }\n  /**\n   * @public\n   * @return If not support, return undefined.\n   */\n\n\n  function barLayout(opt) {\n    if (coordSys.type === 'cartesian2d') {\n      var baseAxis = coordSys.getBaseAxis();\n      return getLayoutOnAxis(defaults({\n        axis: baseAxis\n      }, opt));\n    }\n  }\n  /**\n   * @public\n   */\n\n\n  function currentSeriesIndices() {\n    return ecModel.getCurrentSeriesIndices();\n  }\n  /**\n   * @public\n   * @return font string\n   */\n\n\n  function font(opt) {\n    return labelStyleHelper.getFont(opt, ecModel);\n  }\n}\n\nfunction wrapEncodeDef(data) {\n  var encodeDef = {};\n  each(data.dimensions, function (dimName, dataDimIndex) {\n    var dimInfo = data.getDimensionInfo(dimName);\n\n    if (!dimInfo.isExtraCoord) {\n      var coordDim = dimInfo.coordDim;\n      var dataDims = encodeDef[coordDim] = encodeDef[coordDim] || [];\n      dataDims[dimInfo.coordDimIndex] = dataDimIndex;\n    }\n  });\n  return encodeDef;\n}\n\nfunction createOrUpdateItem(api, el, dataIndex, elOption, seriesModel, group, data, morphPreparation) {\n  // [Rule]\n  // If `renderItem` returns `null`/`undefined`/`false`, remove the previous el if existing.\n  //     (It seems that violate the \"merge\" principle, but most of users probably intuitively\n  //     regard \"return;\" as \"show nothing element whatever\", so make a exception to meet the\n  //     most cases.)\n  // The rule or \"merge\" see [STRATEGY_MERGE].\n  // If `elOption` is `null`/`undefined`/`false` (when `renderItem` returns nothing).\n  if (!elOption) {\n    removeElementDirectly(el, group);\n    return;\n  }\n\n  el = doCreateOrUpdateEl(api, el, dataIndex, elOption, seriesModel, group, true, morphPreparation);\n  el && data.setItemGraphicEl(dataIndex, el);\n  enableHoverEmphasis(el, elOption.focus, elOption.blurScope);\n  return el;\n}\n\nfunction doCreateOrUpdateEl(api, el, dataIndex, elOption, seriesModel, group, isRoot, morphPreparation) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(elOption, 'should not have an null/undefined element setting');\n  }\n\n  var toBeReplacedIdx = -1;\n\n  if (el && doesElNeedRecreate(el, elOption) // || (\n  //     // PENDING: even in one-to-one mapping case, if el is marked as morph,\n  //     // do not sure whether the el will be mapped to another el with different\n  //     // hierarchy in Group tree. So always recreate el rather than reuse the el.\n  //     morphPreparation && morphPreparation.isOneToOneFrom(el)\n  // )\n  ) {\n      // Should keep at the original index, otherwise \"merge by index\" will be incorrect.\n      toBeReplacedIdx = group.childrenRef().indexOf(el);\n      el = null;\n    }\n\n  var elIsNewCreated = !el;\n\n  if (!el) {\n    el = createEl(elOption);\n  } else {\n    // FIMXE:NEXT unified clearState?\n    // If in some case the performance issue arised, consider\n    // do not clearState but update cached normal state directly.\n    el.clearStates();\n  }\n\n  var canMorph = inner(el).canMorph = elOption.morph && isPath(el);\n  var thisElIsMorphTo = canMorph && morphPreparation && morphPreparation.hasFrom(); // Use update animation when morph is enabled.\n\n  var isInit = elIsNewCreated && !thisElIsMorphTo;\n  attachedTxInfoTmp.normal.cfg = attachedTxInfoTmp.normal.conOpt = attachedTxInfoTmp.emphasis.cfg = attachedTxInfoTmp.emphasis.conOpt = attachedTxInfoTmp.blur.cfg = attachedTxInfoTmp.blur.conOpt = attachedTxInfoTmp.select.cfg = attachedTxInfoTmp.select.conOpt = null;\n  attachedTxInfoTmp.isLegacy = false;\n  doCreateOrUpdateAttachedTx(el, dataIndex, elOption, seriesModel, isInit, attachedTxInfoTmp);\n  doCreateOrUpdateClipPath(el, dataIndex, elOption, seriesModel, isInit);\n  var pendingAllPropsFinal = updateElNormal(api, el, thisElIsMorphTo, dataIndex, elOption, elOption.style, attachedTxInfoTmp, seriesModel, isInit, false);\n\n  if (thisElIsMorphTo) {\n    morphPreparation.addTo(el, elOption, dataIndex, pendingAllPropsFinal);\n  }\n\n  for (var i = 0; i < STATES.length; i++) {\n    var stateName = STATES[i];\n\n    if (stateName !== NORMAL) {\n      var otherStateOpt = retrieveStateOption(elOption, stateName);\n      var otherStyleOpt = retrieveStyleOptionOnState(elOption, otherStateOpt, stateName);\n      updateElOnState(stateName, el, otherStateOpt, otherStyleOpt, attachedTxInfoTmp, isRoot, false);\n    }\n  }\n\n  updateZ(el, elOption, seriesModel, attachedTxInfoTmp);\n\n  if (elOption.type === 'group') {\n    mergeChildren(api, el, dataIndex, elOption, seriesModel, morphPreparation);\n  }\n\n  if (toBeReplacedIdx >= 0) {\n    group.replaceAt(el, toBeReplacedIdx);\n  } else {\n    group.add(el);\n  }\n\n  return el;\n} // `el` must not be null/undefined.\n\n\nfunction doesElNeedRecreate(el, elOption) {\n  var elInner = inner(el);\n  var elOptionType = elOption.type;\n  var elOptionShape = elOption.shape;\n  var elOptionStyle = elOption.style;\n  return (// If `elOptionType` is `null`, follow the merge principle.\n    elOptionType != null && elOptionType !== elInner.customGraphicType || elOptionType === 'path' && hasOwnPathData(elOptionShape) && getPathData(elOptionShape) !== elInner.customPathData || elOptionType === 'image' && hasOwn(elOptionStyle, 'image') && elOptionStyle.image !== elInner.customImagePath // // FIXME test and remove this restriction?\n    // || (elOptionType === 'text'\n    //     && hasOwn(elOptionStyle, 'text')\n    //     && (elOptionStyle as TextStyleProps).text !== elInner.customText\n    // )\n\n  );\n}\n\nfunction doCreateOrUpdateClipPath(el, dataIndex, elOption, seriesModel, isInit) {\n  // Based on the \"merge\" principle, if no clipPath provided,\n  // do nothing. The exists clip will be totally removed only if\n  // `el.clipPath` is `false`. Otherwise it will be merged/replaced.\n  var clipPathOpt = elOption.clipPath;\n\n  if (clipPathOpt === false) {\n    if (el && el.getClipPath()) {\n      el.removeClipPath();\n    }\n  } else if (clipPathOpt) {\n    var clipPath = el.getClipPath();\n\n    if (clipPath && doesElNeedRecreate(clipPath, clipPathOpt)) {\n      clipPath = null;\n    }\n\n    if (!clipPath) {\n      clipPath = createEl(clipPathOpt);\n\n      if (process.env.NODE_ENV !== 'production') {\n        assert(clipPath instanceof graphicUtil.Path, 'Only any type of `path` can be used in `clipPath`, rather than ' + clipPath.type + '.');\n      }\n\n      el.setClipPath(clipPath);\n    }\n\n    updateElNormal(null, clipPath, null, dataIndex, clipPathOpt, null, null, seriesModel, isInit, false);\n  } // If not define `clipPath` in option, do nothing unnecessary.\n\n}\n\nfunction doCreateOrUpdateAttachedTx(el, dataIndex, elOption, seriesModel, isInit, attachedTxInfo) {\n  // group do not support textContent temporarily untill necessary.\n  if (el.isGroup) {\n    return;\n  } // Normal must be called before emphasis, for `isLegacy` detection.\n\n\n  processTxInfo(elOption, null, attachedTxInfo);\n  processTxInfo(elOption, EMPHASIS, attachedTxInfo); // If `elOption.textConfig` or `elOption.textContent` is null/undefined, it does not make sence.\n  // So for simplicity, if \"elOption hasOwnProperty of them but be null/undefined\", we do not\n  // trade them as set to null to el.\n  // Especially:\n  // `elOption.textContent: false` means remove textContent.\n  // `elOption.textContent.emphasis.style: false` means remove the style from emphasis state.\n\n  var txConOptNormal = attachedTxInfo.normal.conOpt;\n  var txConOptEmphasis = attachedTxInfo.emphasis.conOpt;\n  var txConOptBlur = attachedTxInfo.blur.conOpt;\n  var txConOptSelect = attachedTxInfo.select.conOpt;\n\n  if (txConOptNormal != null || txConOptEmphasis != null || txConOptSelect != null || txConOptBlur != null) {\n    var textContent = el.getTextContent();\n\n    if (txConOptNormal === false) {\n      textContent && el.removeTextContent();\n    } else {\n      txConOptNormal = attachedTxInfo.normal.conOpt = txConOptNormal || {\n        type: 'text'\n      };\n\n      if (!textContent) {\n        textContent = createEl(txConOptNormal);\n        el.setTextContent(textContent);\n      } else {\n        // If in some case the performance issue arised, consider\n        // do not clearState but update cached normal state directly.\n        textContent.clearStates();\n      }\n\n      var txConStlOptNormal = txConOptNormal && txConOptNormal.style;\n      updateElNormal(null, textContent, null, dataIndex, txConOptNormal, txConStlOptNormal, null, seriesModel, isInit, true);\n\n      for (var i = 0; i < STATES.length; i++) {\n        var stateName = STATES[i];\n\n        if (stateName !== NORMAL) {\n          var txConOptOtherState = attachedTxInfo[stateName].conOpt;\n          updateElOnState(stateName, textContent, txConOptOtherState, retrieveStyleOptionOnState(txConOptNormal, txConOptOtherState, stateName), null, false, true);\n        }\n      }\n\n      txConStlOptNormal ? textContent.dirty() : textContent.markRedraw();\n    }\n  }\n}\n\nfunction processTxInfo(elOption, state, attachedTxInfo) {\n  var stateOpt = !state ? elOption : retrieveStateOption(elOption, state);\n  var styleOpt = !state ? elOption.style : retrieveStyleOptionOnState(elOption, stateOpt, EMPHASIS);\n  var elType = elOption.type;\n  var txCfg = stateOpt ? stateOpt.textConfig : null;\n  var txConOptNormal = elOption.textContent;\n  var txConOpt = !txConOptNormal ? null : !state ? txConOptNormal : retrieveStateOption(txConOptNormal, state);\n\n  if (styleOpt && ( // Because emphasis style has little info to detect legacy,\n  // if normal is legacy, emphasis is trade as legacy.\n  attachedTxInfo.isLegacy || isEC4CompatibleStyle(styleOpt, elType, !!txCfg, !!txConOpt))) {\n    attachedTxInfo.isLegacy = true;\n    var convertResult = convertFromEC4CompatibleStyle(styleOpt, elType, !state); // Explicitly specified `textConfig` and `textContent` has higher priority than\n    // the ones generated by legacy style. Otherwise if users use them and `api.style`\n    // at the same time, they not both work and hardly to known why.\n\n    if (!txCfg && convertResult.textConfig) {\n      txCfg = convertResult.textConfig;\n    }\n\n    if (!txConOpt && convertResult.textContent) {\n      txConOpt = convertResult.textContent;\n    }\n  }\n\n  if (!state && txConOpt) {\n    var txConOptNormal_1 = txConOpt; // `textContent: {type: 'text'}`, the \"type\" is easy to be missing. So we tolerate it.\n\n    !txConOptNormal_1.type && (txConOptNormal_1.type = 'text');\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Do not tolerate incorret type for forward compat.\n      txConOptNormal_1.type !== 'text' && assert(txConOptNormal_1.type === 'text', 'textContent.type must be \"text\"');\n    }\n  }\n\n  var info = !state ? attachedTxInfo.normal : attachedTxInfo[state];\n  info.cfg = txCfg;\n  info.conOpt = txConOpt;\n}\n\nfunction retrieveStateOption(elOption, state) {\n  return !state ? elOption : elOption ? elOption[state] : null;\n}\n\nfunction retrieveStyleOptionOnState(stateOptionNormal, stateOption, state) {\n  var style = stateOption && stateOption.style;\n\n  if (style == null && state === EMPHASIS && stateOptionNormal) {\n    style = stateOptionNormal.styleEmphasis;\n  }\n\n  return style;\n} // Usage:\n// (1) By default, `elOption.$mergeChildren` is `'byIndex'`, which indicates that\n//     the existing children will not be removed, and enables the feature that\n//     update some of the props of some of the children simply by construct\n//     the returned children of `renderItem` like:\n//     `var children = group.children = []; children[3] = {opacity: 0.5};`\n// (2) If `elOption.$mergeChildren` is `'byName'`, add/update/remove children\n//     by child.name. But that might be lower performance.\n// (3) If `elOption.$mergeChildren` is `false`, the existing children will be\n//     replaced totally.\n// (4) If `!elOption.children`, following the \"merge\" principle, nothing will happen.\n//\n// For implementation simpleness, do not provide a direct way to remove sinlge\n// child (otherwise the total indicies of the children array have to be modified).\n// User can remove a single child by set its `ignore` as `true`.\n\n\nfunction mergeChildren(api, el, dataIndex, elOption, seriesModel, morphPreparation) {\n  var newChildren = elOption.children;\n  var newLen = newChildren ? newChildren.length : 0;\n  var mergeChildren = elOption.$mergeChildren; // `diffChildrenByName` has been deprecated.\n\n  var byName = mergeChildren === 'byName' || elOption.diffChildrenByName;\n  var notMerge = mergeChildren === false; // For better performance on roam update, only enter if necessary.\n\n  if (!newLen && !byName && !notMerge) {\n    return;\n  }\n\n  if (byName) {\n    diffGroupChildren({\n      api: api,\n      oldChildren: el.children() || [],\n      newChildren: newChildren || [],\n      dataIndex: dataIndex,\n      seriesModel: seriesModel,\n      group: el,\n      morphPreparation: morphPreparation\n    });\n    return;\n  }\n\n  notMerge && el.removeAll(); // Mapping children of a group simply by index, which\n  // might be better performance.\n\n  var index = 0;\n\n  for (; index < newLen; index++) {\n    newChildren[index] && doCreateOrUpdateEl(api, el.childAt(index), dataIndex, newChildren[index], seriesModel, el, false, morphPreparation);\n  }\n\n  for (var i = el.childCount() - 1; i >= index; i--) {\n    // Do not supprot leave elements that are not mentioned in the latest\n    // `renderItem` return. Otherwise users may not have a clear and simple\n    // concept that how to contorl all of the elements.\n    doRemoveEl(el.childAt(i), seriesModel, el);\n  }\n}\n\nfunction diffGroupChildren(context) {\n  new DataDiffer(context.oldChildren, context.newChildren, getKey, getKey, context).add(processAddUpdate).update(processAddUpdate).remove(processRemove).execute();\n}\n\nfunction getKey(item, idx) {\n  var name = item && item.name;\n  return name != null ? name : GROUP_DIFF_PREFIX + idx;\n}\n\nfunction processAddUpdate(newIndex, oldIndex) {\n  var context = this.context;\n  var childOption = newIndex != null ? context.newChildren[newIndex] : null;\n  var child = oldIndex != null ? context.oldChildren[oldIndex] : null;\n  doCreateOrUpdateEl(context.api, child, context.dataIndex, childOption, context.seriesModel, context.group, false, context.morphPreparation);\n}\n\nfunction processRemove(oldIndex) {\n  var context = this.context;\n  var child = context.oldChildren[oldIndex];\n  doRemoveEl(child, context.seriesModel, context.group);\n}\n\nfunction doRemoveEl(el, seriesModel, group) {\n  if (el) {\n    var leaveToProps = inner(el).leaveToProps;\n    leaveToProps ? graphicUtil.updateProps(el, leaveToProps, seriesModel, {\n      cb: function cb() {\n        group.remove(el);\n      }\n    }) : group.remove(el);\n  }\n}\n/**\n * @return SVG Path data.\n */\n\n\nfunction getPathData(shape) {\n  // \"d\" follows the SVG convention.\n  return shape && (shape.pathData || shape.d);\n}\n\nfunction hasOwnPathData(shape) {\n  return shape && (hasOwn(shape, 'pathData') || hasOwn(shape, 'd'));\n}\n\nfunction isPath(el) {\n  return el && el instanceof graphicUtil.Path;\n}\n\nfunction removeElementDirectly(el, group) {\n  el && group.remove(el);\n}\n/**\n * Any morph-potential el should added by `morphPreparation.addTo(el)`.\n * And they may apply morph or not when `morphPreparation.applyMorphing()`.\n * But at least, all of the \"to\" elements will apply all of the updates\n * as `doCreateOrUpdateItem` did.\n */\n\n\nvar MorphPreparation =\n/** @class */\nfunction () {\n  function MorphPreparation(seriesModel, transOpt) {\n    this._fromList = [];\n    this._toList = [];\n    this._toElOptionList = [];\n    this._allPropsFinalList = [];\n    this._toDataIndices = []; // Key: `toDataIndex`, not `toIdx`\n\n    this._morphConfigList = [];\n    this._seriesModel = seriesModel;\n    this._transOpt = transOpt;\n  }\n\n  MorphPreparation.prototype.hasFrom = function () {\n    return !!this._fromList.length;\n  }; // isOneToOneFrom(el: Element): boolean {\n  //     if (el && inner(el).canMorph) {\n  //         const fromList = this._fromList;\n  //         for (let i = 0; i < fromList.length; i++) {\n  //             if (fromList[i] === el) {\n  //                 return true;\n  //             }\n  //         }\n  //     }\n  // }\n\n\n  MorphPreparation.prototype.findAndAddFrom = function (el) {\n    if (!el) {\n      return;\n    }\n\n    if (inner(el).canMorph) {\n      this._fromList.push(el);\n    }\n\n    if (el.isGroup) {\n      var children = el.childrenRef();\n\n      for (var i = 0; i < children.length; i++) {\n        this.findAndAddFrom(children[i]);\n      }\n    }\n  };\n\n  MorphPreparation.prototype.addTo = function (path, elOption, dataIndex, allPropsFinal) {\n    if (path) {\n      this._toList.push(path);\n\n      this._toElOptionList.push(elOption);\n\n      this._toDataIndices.push(dataIndex);\n\n      this._allPropsFinalList.push(allPropsFinal);\n    }\n  };\n\n  MorphPreparation.prototype.applyMorphing = function () {\n    // [MORPHING_LOGIC_HINT]\n    // Pay attention to the order:\n    // (A) Apply `allPropsFinal` and `styleOption` to \"to\".\n    //     (Then \"to\" becomes to the final state.)\n    // (B) Apply `morphPath`/`combine`/`separate`.\n    //     (Based on the current state of \"from\" and the final state of \"to\".)\n    //     (Then we may get \"from.subList\" or \"to.subList\".)\n    // (C) Copy the related props from \"from\" to \"from.subList\", from \"to\" to \"to.subList\".\n    // (D) Collect `transitionFromProps` for \"to\" and \"to.subList\"\n    //     (Based on \"from\" or \"from.subList\".)\n    // (E) Apply `transitionFromProps` to \"to\" and \"to.subList\"\n    //     (It might change the prop values to the first frame value.)\n    // Case_I:\n    //     If (D) should be after (C), we use sequence: A - B - C - D - E\n    // Case_II:\n    //     If (A) should be after (D), we use sequence: D - A - B - C - E\n    // [MORPHING_LOGIC_HINT]\n    // zrender `morphPath`/`combine`/`separate` only manages the shape animation.\n    // Other props (like transfrom, style transition) will handled in echarts).\n    // [MORPHING_LOGIC_HINT]\n    // Make sure `applyPropsFinal` always be called for \"to\".\n    var type = this._type;\n    var fromList = this._fromList;\n    var toList = this._toList;\n    var toListLen = toList.length;\n    var fromListLen = fromList.length;\n\n    if (!fromListLen || !toListLen) {\n      return;\n    }\n\n    if (type === 'oneToOne') {\n      // In one-to-one case, we by default apply a simple rule:\n      // map \"from\" and \"to\" one by one.\n      // For this case: old_data_item_el and new_data_item_el\n      // has the same hierarchy of group tree but only some path type changed.\n      for (var toIdx = 0; toIdx < toListLen; toIdx++) {\n        this._oneToOneForSingleTo(toIdx, toIdx);\n      }\n    } else if (type === 'manyToOne') {\n      // A rough strategy: if there are more than one \"to\", we simply divide \"fromList\" equally.\n      var fromSingleSegLen = Math.max(1, Math.floor(fromListLen / toListLen));\n\n      for (var toIdx = 0, fromIdxStart = 0; toIdx < toListLen; toIdx++, fromIdxStart += fromSingleSegLen) {\n        var fromCount = toIdx + 1 >= toListLen ? fromListLen - fromIdxStart : fromSingleSegLen;\n\n        this._manyToOneForSingleTo(toIdx, fromIdxStart >= fromListLen ? null : fromIdxStart, fromCount);\n      }\n    } else if (type === 'oneToMany') {\n      // A rough strategy: if there are more than one \"from\", we simply divide \"toList\" equally.\n      var toSingleSegLen = Math.max(1, Math.floor(toListLen / fromListLen));\n\n      for (var toIdxStart = 0, fromIdx = 0; toIdxStart < toListLen; toIdxStart += toSingleSegLen, fromIdx++) {\n        var toCount = toIdxStart + toSingleSegLen >= toListLen ? toListLen - toIdxStart : toSingleSegLen;\n\n        this._oneToManyForSingleFrom(toIdxStart, toCount, fromIdx >= fromListLen ? null : fromIdx);\n      }\n    }\n  };\n\n  MorphPreparation.prototype._oneToOneForSingleTo = function ( // \"to\" must NOT be null/undefined.\n  toIdx, // May `fromIdx >= this._fromList.length`\n  fromIdx) {\n    var to = this._toList[toIdx];\n    var toElOption = this._toElOptionList[toIdx];\n    var toDataIndex = this._toDataIndices[toIdx];\n    var allPropsFinal = this._allPropsFinalList[toIdx];\n    var from = this._fromList[fromIdx];\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(toDataIndex);\n\n    var morphDuration = elAnimationConfig.duration;\n\n    if (from && isCombiningPath(from)) {\n      applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n      if (morphDuration) {\n        var combineResult = combine([from], to, elAnimationConfig, copyPropsWhenDivided);\n\n        this._processResultIndividuals(combineResult, toIdx, null);\n      } // The target el will not be displayed and transition from multiple path.\n      // transition on the target el does not make sense.\n\n    } else {\n      var morphFrom = morphDuration // from === to usually happen in scenarios where internal update like\n      // \"dataZoom\", \"legendToggle\" happen. If from is not in any morphing,\n      // we do not need to call `morphPath`.\n      && from && (from !== to || isInAnyMorphing(from)) ? from : null; // See [Case_II] above.\n      // In this case, there is probably `from === to`. And the `transitionFromProps` collecting\n      // does not depends on morphing. So we collect `transitionFromProps` first.\n\n      var transFromProps = {};\n      prepareShapeOrExtraTransitionFrom('shape', to, morphFrom, toElOption, transFromProps, false);\n      prepareShapeOrExtraTransitionFrom('extra', to, morphFrom, toElOption, transFromProps, false);\n      prepareTransformTransitionFrom(to, morphFrom, toElOption, transFromProps, false);\n      prepareStyleTransitionFrom(to, morphFrom, toElOption, toElOption.style, transFromProps, false);\n      applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n      if (morphFrom) {\n        morphPath(morphFrom, to, elAnimationConfig);\n      }\n\n      applyTransitionFrom(to, toDataIndex, toElOption, this._seriesModel, transFromProps, false);\n    }\n  };\n\n  MorphPreparation.prototype._manyToOneForSingleTo = function ( // \"to\" must NOT be null/undefined.\n  toIdx, // May be null.\n  fromIdxStart, fromCount) {\n    var to = this._toList[toIdx];\n    var toElOption = this._toElOptionList[toIdx];\n    var allPropsFinal = this._allPropsFinalList[toIdx];\n    applyPropsFinal(to, allPropsFinal, toElOption.style);\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(this._toDataIndices[toIdx]);\n\n    if (elAnimationConfig.duration && fromIdxStart != null) {\n      var combineFromList = [];\n\n      for (var fromIdx = fromIdxStart; fromIdx < fromCount; fromIdx++) {\n        combineFromList.push(this._fromList[fromIdx]);\n      }\n\n      var combineResult = combine(combineFromList, to, elAnimationConfig, copyPropsWhenDivided);\n\n      this._processResultIndividuals(combineResult, toIdx, null);\n    }\n  };\n\n  MorphPreparation.prototype._oneToManyForSingleFrom = function ( // \"to\" must NOT be null/undefined.\n  toIdxStart, toCount, // May be null\n  fromIdx) {\n    var from = fromIdx == null ? null : this._fromList[fromIdx];\n    var toList = this._toList;\n    var separateToList = [];\n\n    for (var toIdx = toIdxStart; toIdx < toCount; toIdx++) {\n      var to = toList[toIdx];\n      applyPropsFinal(to, this._allPropsFinalList[toIdx], this._toElOptionList[toIdx].style);\n      separateToList.push(to);\n    }\n\n    var elAnimationConfig = this._getOrCreateMorphConfig(this._toDataIndices[toIdxStart]);\n\n    if (elAnimationConfig.duration && from) {\n      var separateResult = separate(from, separateToList, elAnimationConfig, copyPropsWhenDivided);\n\n      this._processResultIndividuals(separateResult, toIdxStart, toCount);\n    }\n  };\n\n  MorphPreparation.prototype._processResultIndividuals = function (combineSeparateResult, toIdxStart, toCount) {\n    var isSeparate = toCount != null;\n\n    for (var i = 0; i < combineSeparateResult.count; i++) {\n      var fromIndividual = combineSeparateResult.fromIndividuals[i];\n      var toIndividual = combineSeparateResult.toIndividuals[i]; // Here it's a trick:\n      // For \"combine\" case, all of the `toIndividuals` map to the same `toIdx`.\n      // For \"separate\" case, the `toIndividuals` map to some certain segment of `_toList` accurately.\n\n      var toIdx = toIdxStart + (isSeparate ? i : 0);\n      var toElOption = this._toElOptionList[toIdx];\n      var dataIndex = this._toDataIndices[toIdx];\n      var transFromProps = {};\n      prepareTransformTransitionFrom(toIndividual, fromIndividual, toElOption, transFromProps, false);\n      prepareStyleTransitionFrom(toIndividual, fromIndividual, toElOption, toElOption.style, transFromProps, false);\n      applyTransitionFrom(toIndividual, dataIndex, toElOption, this._seriesModel, transFromProps, false);\n    }\n  };\n\n  MorphPreparation.prototype._getOrCreateMorphConfig = function (dataIndex) {\n    var morphConfigList = this._morphConfigList;\n    var config = morphConfigList[dataIndex];\n\n    if (config) {\n      return config;\n    }\n\n    var duration;\n    var easing;\n    var delay;\n    var seriesModel = this._seriesModel;\n    var transOpt = this._transOpt;\n\n    if (seriesModel.isAnimationEnabled()) {\n      // PENDING: refactor? this is the same logic as `src/util/graphic.ts#animateOrSetProps`.\n      var animationPayload = void 0;\n\n      if (seriesModel && seriesModel.ecModel) {\n        var updatePayload = seriesModel.ecModel.getUpdatePayload();\n        animationPayload = updatePayload && updatePayload.animation;\n      }\n\n      if (animationPayload) {\n        duration = animationPayload.duration || 0;\n        easing = animationPayload.easing || 'cubicOut';\n        delay = animationPayload.delay || 0;\n      } else {\n        easing = seriesModel.get('animationEasingUpdate');\n        var delayOption = seriesModel.get('animationDelayUpdate');\n        delay = isFunction(delayOption) ? delayOption(dataIndex) : delayOption;\n        var durationOption = seriesModel.get('animationDurationUpdate');\n        duration = isFunction(durationOption) ? durationOption(dataIndex) : durationOption;\n      }\n    }\n\n    config = {\n      duration: duration || 0,\n      delay: delay,\n      easing: easing,\n      dividingMethod: transOpt ? transOpt.dividingMethod : null\n    };\n    morphConfigList[dataIndex] = config;\n    return config;\n  };\n\n  MorphPreparation.prototype.reset = function (type) {\n    // `this._morphConfigList` can be kept. It only related to `dataIndex`.\n    this._type = type;\n    this._fromList.length = this._toList.length = this._toElOptionList.length = this._allPropsFinalList.length = this._toDataIndices.length = 0;\n  };\n\n  return MorphPreparation;\n}();\n\nfunction copyPropsWhenDivided(srcPath, tarPath, willClone) {\n  // Do not copy transform props.\n  // Sub paths are transfrom based on their host path.\n  // tarPath.x = srcPath.x;\n  // tarPath.y = srcPath.y;\n  // tarPath.scaleX = srcPath.scaleX;\n  // tarPath.scaleY = srcPath.scaleY;\n  // tarPath.originX = srcPath.originX;\n  // tarPath.originY = srcPath.originY;\n  // If just carry the style, will not be modifed, so do not copy.\n  tarPath.style = willClone ? clone(srcPath.style) : srcPath.style;\n  tarPath.zlevel = srcPath.zlevel;\n  tarPath.z = srcPath.z;\n  tarPath.z2 = srcPath.z2;\n}\n\nexport function install(registers) {\n  registers.registerChartView(CustomSeriesView);\n  registers.registerSeriesModel(CustomSeriesModel);\n}","map":null,"metadata":{},"sourceType":"module"}