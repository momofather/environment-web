{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Definable from './Definable';\nimport * as zrUtil from '../../core/util';\nimport { createOrUpdateImage } from '../../graphic/helper/image';\nimport WeakMap from '../../core/WeakMap';\n\nfunction isPattern(value) {\n  return value && (!!value.image || !!value.svgElement);\n}\n\nvar patternDomMap = new WeakMap();\n\nvar PatternManager = function (_super) {\n  __extends(PatternManager, _super);\n\n  function PatternManager(zrId, svgRoot) {\n    return _super.call(this, zrId, svgRoot, ['pattern'], '__pattern_in_use__') || this;\n  }\n\n  PatternManager.prototype.addWithoutUpdate = function (svgElement, displayable) {\n    if (displayable && displayable.style) {\n      var that_1 = this;\n      zrUtil.each(['fill', 'stroke'], function (fillOrStroke) {\n        var pattern = displayable.style[fillOrStroke];\n\n        if (isPattern(pattern)) {\n          var defs = that_1.getDefs(true);\n          var dom = patternDomMap.get(pattern);\n\n          if (dom) {\n            if (!defs.contains(dom)) {\n              that_1.addDom(dom);\n            }\n          } else {\n            dom = that_1.add(pattern);\n          }\n\n          that_1.markUsed(displayable);\n          var id = dom.getAttribute('id');\n          svgElement.setAttribute(fillOrStroke, 'url(#' + id + ')');\n        }\n      });\n    }\n  };\n\n  PatternManager.prototype.add = function (pattern) {\n    if (!isPattern(pattern)) {\n      return;\n    }\n\n    var dom = this.createElement('pattern');\n    pattern.id = pattern.id == null ? this.nextId++ : pattern.id;\n    dom.setAttribute('id', 'zr' + this._zrId + '-pattern-' + pattern.id);\n    dom.setAttribute('x', '0');\n    dom.setAttribute('y', '0');\n    dom.setAttribute('patternUnits', 'userSpaceOnUse');\n    this.updateDom(pattern, dom);\n    this.addDom(dom);\n    return dom;\n  };\n\n  PatternManager.prototype.update = function (pattern) {\n    if (!isPattern(pattern)) {\n      return;\n    }\n\n    var that = this;\n    this.doUpdate(pattern, function () {\n      var dom = patternDomMap.get(pattern);\n      that.updateDom(pattern, dom);\n    });\n  };\n\n  PatternManager.prototype.updateDom = function (pattern, patternDom) {\n    var svgElement = pattern.svgElement;\n\n    if (svgElement instanceof SVGElement) {\n      if (svgElement.parentNode !== patternDom) {\n        patternDom.innerHTML = '';\n        patternDom.appendChild(svgElement);\n        patternDom.setAttribute('width', pattern.svgWidth + '');\n        patternDom.setAttribute('height', pattern.svgHeight + '');\n      }\n    } else {\n      var img = void 0;\n      var prevImage = patternDom.getElementsByTagName('image');\n\n      if (prevImage.length) {\n        if (pattern.image) {\n          img = prevImage[0];\n        } else {\n          patternDom.removeChild(prevImage[0]);\n          return;\n        }\n      } else if (pattern.image) {\n        img = this.createElement('image');\n      }\n\n      if (img) {\n        var imageSrc = void 0;\n\n        if (typeof pattern.image === 'string') {\n          imageSrc = pattern.image;\n        } else if (pattern.image instanceof HTMLImageElement) {\n          imageSrc = pattern.image.src;\n        } else if (pattern.image instanceof HTMLCanvasElement) {\n          imageSrc = pattern.image.toDataURL();\n        }\n\n        if (imageSrc) {\n          img.setAttribute('href', imageSrc);\n          img.setAttribute('x', '0');\n          img.setAttribute('y', '0');\n          var hostEl = {\n            dirty: function dirty() {}\n          };\n          var createdImage = createOrUpdateImage(imageSrc, img, hostEl, function (img) {\n            patternDom.setAttribute('width', img.width + '');\n            patternDom.setAttribute('height', img.height + '');\n          });\n\n          if (createdImage && createdImage.width && createdImage.height) {\n            patternDom.setAttribute('width', createdImage.width + '');\n            patternDom.setAttribute('height', createdImage.height + '');\n          }\n\n          patternDom.appendChild(img);\n        }\n      }\n    }\n\n    var x = pattern.x || 0;\n    var y = pattern.y || 0;\n    var rotation = (pattern.rotation || 0) / Math.PI * 180;\n    var scaleX = pattern.scaleX || 1;\n    var scaleY = pattern.scaleY || 1;\n    var transform = \"translate(\" + x + \", \" + y + \") rotate(\" + rotation + \") scale(\" + scaleX + \", \" + scaleY + \")\";\n    patternDom.setAttribute('patternTransform', transform);\n    patternDomMap.set(pattern, patternDom);\n  };\n\n  PatternManager.prototype.markUsed = function (displayable) {\n    if (displayable.style) {\n      if (isPattern(displayable.style.fill)) {\n        _super.prototype.markDomUsed.call(this, patternDomMap.get(displayable.style.fill));\n      }\n\n      if (isPattern(displayable.style.stroke)) {\n        _super.prototype.markDomUsed.call(this, patternDomMap.get(displayable.style.stroke));\n      }\n    }\n  };\n\n  return PatternManager;\n}(Definable);\n\nexport default PatternManager;","map":null,"metadata":{},"sourceType":"module"}